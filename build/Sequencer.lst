ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"Sequencer.cpp"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZN9Sequencer4tickEv,"ax",%progbits
  17              		.align	1
  18              		.p2align 2,,3
  19              		.global	_ZN9Sequencer4tickEv
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-d16
  26              	_ZN9Sequencer4tickEv:
  27              	.LVL0:
  28              	.LFB4305:
  29              		.file 1 "Sequencer.cpp"
   1:Sequencer.cpp **** /*
   2:Sequencer.cpp **** GNU General Public License v3.0
   3:Sequencer.cpp **** Author: Jack Payne
   4:Sequencer.cpp **** 
   5:Sequencer.cpp ****  _______             __                                __                                  __ 
   6:Sequencer.cpp **** /       \           /  |                              /  |                                /  |
   7:Sequencer.cpp **** BBBBBBB  |  ______  BB/  ________   ______    _______ BB |____    ______    ______    ____BB |
   8:Sequencer.cpp **** BB |__BB | /      \ /  |/        | /      \  /       |BB      \  /      \  /      \  /    BB |
   9:Sequencer.cpp **** BB    BB< /BBBBBB  |BB |BBBBBBBB/  BBBBBB  |/BBBBBBB/ BBBBBBB  |/BBBBBB  |/BBBBBB  |/BBBBBBB |
  10:Sequencer.cpp **** BBBBBBB  |BB |  BB/ BB |  /  BB/   /    BB |BB |      BB |  BB |BB |  BB |BB |  BB/ BB |  BB |
  11:Sequencer.cpp **** BB |__BB |BB |      BB | /BBBB/__ /BBBBBBB |BB \_____ BB |  BB |BB \__BB |BB |      BB \__BB |
  12:Sequencer.cpp **** BB    BB/ BB |      BB |/BB      |BB    BB |BB       |BB |  BB |BB    BB/ BB |      BB    BB |
  13:Sequencer.cpp **** BBBBBBB/  BB/       BB/ BBBBBBBB/  BBBBBBB/  BBBBBBB/ BB/   BB/  BBBBBB/  BB/        BBBBBBB/	v1.0
  14:Sequencer.cpp **** */
  15:Sequencer.cpp **** 
  16:Sequencer.cpp **** #include "Sequencer.h"
  17:Sequencer.cpp **** 
  18:Sequencer.cpp **** Sequencer::Sequencer(float sample_rate, DrumSynth& drum_synth, ChordSynth& chord_synth) 
  19:Sequencer.cpp ****     :  bpm(105), sample_rate(sample_rate), drum_synth(drum_synth), chord_synth(chord_synth) {
  20:Sequencer.cpp ****         init_sequences();
  21:Sequencer.cpp ****     }
  22:Sequencer.cpp **** 
  23:Sequencer.cpp **** void Sequencer::tick() {
  30              		.loc 1 23 24 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 88
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  24:Sequencer.cpp ****     int SAMPLES_IN_BAR = static_cast<int>(sample_rate * ((60.f * 4.f )/ bpm));
  34              		.loc 1 24 5 view .LVU1
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 2


  23:Sequencer.cpp ****     int SAMPLES_IN_BAR = static_cast<int>(sample_rate * ((60.f * 4.f )/ bpm));
  35              		.loc 1 23 24 is_stmt 0 view .LVU2
  36 0000 70B5     		push	{r4, r5, r6, lr}
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 4, -16
  39              		.cfi_offset 5, -12
  40              		.cfi_offset 6, -8
  41              		.cfi_offset 14, -4
  42              		.loc 1 24 73 view .LVU3
  43 0002 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
  23:Sequencer.cpp ****     int SAMPLES_IN_BAR = static_cast<int>(sample_rate * ((60.f * 4.f )/ bpm));
  44              		.loc 1 23 24 view .LVU4
  45 0004 96B0     		sub	sp, sp, #88
  46              		.cfi_def_cfa_offset 104
  47              		.loc 1 24 71 view .LVU5
  48 0006 9FED2F6A 		vldr.32	s12, .L35
  23:Sequencer.cpp ****     int SAMPLES_IN_BAR = static_cast<int>(sample_rate * ((60.f * 4.f )/ bpm));
  49              		.loc 1 23 24 view .LVU6
  50 000a 0446     		mov	r4, r0
  51              		.loc 1 24 73 view .LVU7
  52 000c 07EE103A 		vmov	s14, r3	@ int
  53              		.loc 1 24 55 view .LVU8
  54 0010 D0ED016A 		vldr.32	s13, [r0, #4]
  25:Sequencer.cpp ****     int step_duration = SAMPLES_IN_BAR / 16;
  26:Sequencer.cpp ****     int current_step = current_tick / step_duration;
  55              		.loc 1 26 24 view .LVU9
  56 0014 8268     		ldr	r2, [r0, #8]
  24:Sequencer.cpp ****     int step_duration = SAMPLES_IN_BAR / 16;
  57              		.loc 1 24 71 view .LVU10
  58 0016 B8EEC77A 		vcvt.f32.s32	s14, s14
  59 001a C6EE077A 		vdiv.f32	s15, s12, s14
  24:Sequencer.cpp ****     int step_duration = SAMPLES_IN_BAR / 16;
  60              		.loc 1 24 55 view .LVU11
  61 001e 67EEA67A 		vmul.f32	s15, s15, s13
  24:Sequencer.cpp ****     int step_duration = SAMPLES_IN_BAR / 16;
  62              		.loc 1 24 9 view .LVU12
  63 0022 FDEEE77A 		vcvt.s32.f32	s15, s15
  64 0026 17EE905A 		vmov	r5, s15	@ int
  65              	.LVL1:
  25:Sequencer.cpp ****     int step_duration = SAMPLES_IN_BAR / 16;
  66              		.loc 1 25 5 is_stmt 1 view .LVU13
  25:Sequencer.cpp ****     int step_duration = SAMPLES_IN_BAR / 16;
  67              		.loc 1 25 9 is_stmt 0 view .LVU14
  68 002a 002D     		cmp	r5, #0
  69 002c B4BF     		ite	lt
  70 002e 05F10F03 		addlt	r3, r5, #15
  71 0032 17EE903A 		vmovge	r3, s15	@ int
  72 0036 1B11     		asrs	r3, r3, #4
  73              	.LVL2:
  74              		.loc 1 26 5 is_stmt 1 view .LVU15
  75              		.loc 1 26 9 is_stmt 0 view .LVU16
  76 0038 92FBF3F1 		sdiv	r1, r2, r3
  77              	.LVL3:
  27:Sequencer.cpp **** 
  28:Sequencer.cpp ****     // If at a 16th note
  29:Sequencer.cpp ****     if (current_tick % step_duration == 0 && current_step < 16) {
  78              		.loc 1 29 5 is_stmt 1 view .LVU17
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 3


  79              	.LBB276:
  80              		.loc 1 29 22 is_stmt 0 view .LVU18
  81 003c 03FB1123 		mls	r3, r3, r1, r2
  82              	.LVL4:
  83              		.loc 1 29 43 view .LVU19
  84 0040 0BB9     		cbnz	r3, .L3
  85              	.LVL5:
  86              		.loc 1 29 43 view .LVU20
  87 0042 0F29     		cmp	r1, #15
  88 0044 09DD     		ble	.L30
  89              	.LVL6:
  90              	.L3:
  91              		.loc 1 29 43 view .LVU21
  92              	.LBE276:
  30:Sequencer.cpp ****         auto seq = sequences[sequence_idx];
  31:Sequencer.cpp ****         if (seq.drum_sequence.kick_steps[current_step])    drum_synth.trigger_kick();
  32:Sequencer.cpp ****         if (seq.drum_sequence.snare_steps[current_step])   drum_synth.trigger_snare();
  33:Sequencer.cpp ****         if (seq.drum_sequence.hat_steps[current_step])     drum_synth.trigger_hat();
  34:Sequencer.cpp **** 
  35:Sequencer.cpp ****         chord_synth.enable(); 
  36:Sequencer.cpp ****         if (groove) {
  37:Sequencer.cpp ****             chord_synth.set_bass_note(seq.bass_sequence[current_step]);
  38:Sequencer.cpp ****             if (!seq.chord_sequence[current_step]) {
  39:Sequencer.cpp ****                 chord_synth.disable();
  40:Sequencer.cpp ****             }
  41:Sequencer.cpp ****         }    
  42:Sequencer.cpp ****     }
  43:Sequencer.cpp **** 
  44:Sequencer.cpp ****     current_tick++;
  93              		.loc 1 44 5 is_stmt 1 view .LVU22
  94              		.loc 1 44 17 is_stmt 0 view .LVU23
  95 0046 0132     		adds	r2, r2, #1
  45:Sequencer.cpp ****     if (current_tick >= SAMPLES_IN_BAR)
  96              		.loc 1 45 5 is_stmt 1 view .LVU24
  97 0048 AA42     		cmp	r2, r5
  98 004a 02DA     		bge	.L10
  44:Sequencer.cpp ****     if (current_tick >= SAMPLES_IN_BAR)
  99              		.loc 1 44 17 is_stmt 0 view .LVU25
 100 004c A260     		str	r2, [r4, #8]
  46:Sequencer.cpp ****         current_tick = 0;
  47:Sequencer.cpp **** }
 101              		.loc 1 47 1 view .LVU26
 102 004e 16B0     		add	sp, sp, #88
 103              		.cfi_remember_state
 104              		.cfi_def_cfa_offset 16
 105              		@ sp needed
 106 0050 70BD     		pop	{r4, r5, r6, pc}
 107              	.LVL7:
 108              	.L10:
 109              		.cfi_restore_state
  46:Sequencer.cpp ****         current_tick = 0;
 110              		.loc 1 46 9 is_stmt 1 view .LVU27
  46:Sequencer.cpp ****         current_tick = 0;
 111              		.loc 1 46 22 is_stmt 0 view .LVU28
 112 0052 0023     		movs	r3, #0
 113 0054 A360     		str	r3, [r4, #8]
 114              		.loc 1 47 1 view .LVU29
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 4


 115 0056 16B0     		add	sp, sp, #88
 116              		.cfi_remember_state
 117              		.cfi_def_cfa_offset 16
 118              		@ sp needed
 119 0058 70BD     		pop	{r4, r5, r6, pc}
 120              	.LVL8:
 121              	.L30:
 122              		.cfi_restore_state
 123              	.LBB301:
 124              	.LBB277:
  30:Sequencer.cpp ****         if (seq.drum_sequence.kick_steps[current_step])    drum_synth.trigger_kick();
 125              		.loc 1 30 9 is_stmt 1 view .LVU30
 126              	.LBB278:
 127              	.LBI278:
 128              		.file 2 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\stl_vector.
   1:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // Vector implementation -*- C++ -*-
   2:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
   3:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** //
   5:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // terms of the GNU General Public License as published by the
   8:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // any later version.
  10:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  11:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // GNU General Public License for more details.
  15:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  16:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  20:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  25:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** /*
  26:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *
  27:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Copyright (c) 1994
  28:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Hewlett-Packard Company
  29:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *
  30:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * representations about the suitability of this software for any
  36:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *
  38:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *
  39:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Copyright (c) 1996
  40:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *
  42:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 5


  43:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * representations about the suitability of this  software for any
  48:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  */
  50:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  51:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** /** @file bits/stl_vector.h
  52:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  */
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  56:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #ifndef _STL_VECTOR_H
  57:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _STL_VECTOR_H 1
  58:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  59:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #include <bits/functexcept.h>
  61:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #include <bits/concept_check.h>
  62:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
  63:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #include <initializer_list>
  64:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
  65:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus > 201703L
  66:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # include <compare>
  67:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
  68:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  69:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #include <debug/assertions.h>
  70:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  71:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  72:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** extern "C" void
  73:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  74:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  const void*, const void*);
  75:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
  76:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  77:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  78:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** {
  79:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  80:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  81:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  82:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  83:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   template<typename _Tp, typename _Alloc>
  84:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     struct _Vector_base
  85:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     {
  86:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  87:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  88:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  89:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        	pointer;
  90:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  91:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       struct _Vector_impl_data
  92:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
  93:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	pointer _M_start;
  94:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	pointer _M_finish;
  95:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	pointer _M_end_of_storage;
  96:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  97:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  98:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
  99:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 6


 100:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 101:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 102:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 103:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 104:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 105:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 106:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 107:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 108:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
 109:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 110:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
 111:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_start = __x._M_start;
 112:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_finish = __x._M_finish;
 113:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 114:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 116:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
 117:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 118:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
 119:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 120:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  // information used by TBAA.
 121:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _Vector_impl_data __tmp;
 122:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __tmp._M_copy_data(*this);
 123:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_copy_data(__x);
 124:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __x._M_copy_data(__tmp);
 125:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
 126:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       };
 127:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 128:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       struct _Vector_impl
 129:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 130:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 131:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 132:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 133:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type()
 134:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 135:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 136:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 137:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(__a)
 138:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 139:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 140:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 141:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 142:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 143:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 144:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 145:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 146:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 147:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 149:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 150:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 151:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 152:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 153:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 154:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 155:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 156:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 7


 157:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	template<typename = _Tp_alloc_type>
 158:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  struct _Asan
 159:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 160:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 161:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      ::size_type size_type;
 162:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 163:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void _S_shrink(_Vector_impl&, size_type) { }
 164:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void _S_on_dealloc(_Vector_impl&) { }
 165:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 166:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 167:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 168:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    struct _Grow
 169:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
 170:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Grow(_Vector_impl&, size_type) { }
 171:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      void _M_grew(size_type) { }
 172:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    };
 173:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  };
 174:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 175:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 176:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	template<typename _Up>
 177:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 178:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 179:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 180:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      ::size_type size_type;
 181:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 182:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 183:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 184:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void
 185:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 186:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
 187:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 188:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    }
 190:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 191:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void
 192:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 193:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 195:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void
 196:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 197:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 199:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void
 200:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 201:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
 202:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      if (__impl._M_start)
 203:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 204:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    }
 205:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 206:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 207:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    struct _Reinit
 208:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
 209:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 210:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      {
 211:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 212:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		_S_on_dealloc(_M_impl);
 213:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      }
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 8


 214:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 215:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      ~_Reinit()
 216:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      {
 217:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 218:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		if (_M_impl._M_start)
 219:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 220:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			    _M_impl._M_finish);
 221:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      }
 222:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 223:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Vector_impl& _M_impl;
 224:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 225:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 226:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 227:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 228:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 229:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    };
 230:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 231:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 232:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    struct _Grow
 233:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
 234:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 235:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 236:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 237:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 238:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 239:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 240:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 241:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 242:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 243:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 244:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 245:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 246:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    private:
 247:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Vector_impl& _M_impl;
 248:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      size_type _M_n;
 249:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    };
 250:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  };
 251:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 252:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 253:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 254:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 255:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 256:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 257:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 258:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 259:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 260:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 261:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 262:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 263:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 264:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 265:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 266:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 267:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 268:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 269:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 270:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       };
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 9


 271:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 272:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
 273:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef _Alloc allocator_type;
 274:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 275:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Tp_alloc_type&
 276:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 277:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
 278:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 279:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const _Tp_alloc_type&
 280:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 281:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
 282:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 283:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       allocator_type
 284:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 285:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 286:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 287:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 288:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base() = default;
 289:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 290:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base() { }
 291:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 292:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 293:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 294:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(__a) { }
 295:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 296:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Kept for ABI compatibility.
 297:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 298:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(size_t __n)
 299:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl()
 300:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_create_storage(__n); }
 301:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 302:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 303:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 304:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(__a)
 305:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_create_storage(__n); }
 306:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 307:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 308:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 309:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 310:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Kept for ABI compatibility.
 311:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 312:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 313:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(std::move(__a)) { }
 314:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 315:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 316:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(__a)
 317:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 318:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__x.get_allocator() == __a)
 319:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 320:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	else
 321:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 322:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 323:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _M_create_storage(__n);
 324:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  }
 325:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 326:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # endif
 327:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 10


 328:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 329:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 330:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { }
 331:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 332:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 333:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 334:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 335:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 336:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 337:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 338:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 339:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
 340:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_impl _M_impl;
 341:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 342:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       pointer
 343:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_allocate(size_t __n)
 344:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 345:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 346:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 347:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 348:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 349:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 350:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 351:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 352:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 353:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__p)
 354:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 355:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 356:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 357:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     protected:
 358:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 359:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_create_storage(size_t __n)
 360:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 361:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 362:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 363:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 364:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 365:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     };
 366:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 367:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   /**
 368:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 369:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  individual elements in any order.
 370:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *
 371:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  @ingroup sequences
 372:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *
 373:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  @tparam _Tp  Type of element.
 374:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 375:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *
 376:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 377:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 378:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 379:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 380:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 381:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *
 382:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 383:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 384:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  elements in any order and saves the user from worrying about
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 11


 385:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 386:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  also provided as with C-style arrays.
 387:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   */
 388:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 389:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 390:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     {
 391:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 392:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Concept requirements.
 393:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 394:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # if __cplusplus < 201103L
 395:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 396:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # endif
 397:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 398:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 399:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 400:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 401:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 402:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 403:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # if __cplusplus > 201703L || defined __STRICT_ANSI__
 404:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 405:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 406:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # endif
 407:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 408:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 409:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 410:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 411:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 412:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 413:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
 414:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef _Tp					value_type;
 415:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Base::pointer			pointer;
 416:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 417:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 418:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 419:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 420:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 421:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_iterator;
 422:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 423:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 424:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef size_t					size_type;
 425:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef ptrdiff_t					difference_type;
 426:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef _Alloc					allocator_type;
 427:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 428:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     private:
 429:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 430:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static constexpr bool
 431:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_nothrow_relocate(true_type)
 432:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 433:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 434:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  std::declval<pointer>(),
 435:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  std::declval<pointer>(),
 436:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 437:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 438:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 439:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static constexpr bool
 440:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_nothrow_relocate(false_type)
 441:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return false; }
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 12


 442:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 443:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static constexpr bool
 444:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_use_relocate()
 445:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 446:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 447:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 448:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 449:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 450:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 451:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 452:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static pointer
 453:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 454:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 455:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 456:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 457:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 458:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 459:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static pointer
 460:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 461:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 462:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return __result; }
 463:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 464:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static pointer
 465:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 466:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 467:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 468:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 469:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 470:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 471:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif // C++11
 472:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 473:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     protected:
 474:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       using _Base::_M_allocate;
 475:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       using _Base::_M_deallocate;
 476:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       using _Base::_M_impl;
 477:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 478:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 479:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
 480:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 481:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 482:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 483:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 484:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 485:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 486:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 487:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector() = default;
 488:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 489:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector() { }
 490:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 491:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 492:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 493:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 494:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator object.
 495:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 496:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       explicit
 497:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 498:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__a) { }
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 13


 499:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 500:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 501:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 502:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 503:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 504:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 505:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 506:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 507:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  constructed elements.
 508:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 509:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       explicit
 510:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 511:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 512:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_default_initialize(__n); }
 513:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 514:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 515:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 516:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 517:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __value  An element to copy.
 518:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 519:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 520:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 521:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 522:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(size_type __n, const value_type& __value,
 523:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 524:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 525:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 526:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 527:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 528:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 529:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 530:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __value  An element to copy.
 531:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 532:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 533:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 534:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 535:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       explicit
 536:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 537:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 538:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 539:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 540:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 541:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 542:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 543:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  %Vector copy constructor.
 544:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 545:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 546:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 547:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @a __x  will not be copied
 548:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 549:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 550:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 551:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 552:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 553:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(const vector& __x)
 554:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__x.size(),
 555:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 14


 556:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 557:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish =
 558:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 559:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				      this->_M_impl._M_start,
 560:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				      _M_get_Tp_allocator());
 561:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 562:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 563:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 564:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 565:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  %Vector move constructor.
 566:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 567:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 568:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  moved instance.
 569:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
 570:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector.
 571:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 572:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(vector&&) noexcept = default;
 573:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 574:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /// Copy constructor with alternative allocator
 575:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 576:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__x.size(), __a)
 577:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 578:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish =
 579:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 580:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				      this->_M_impl._M_start,
 581:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				      _M_get_Tp_allocator());
 582:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 583:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 584:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     private:
 585:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 586:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__m, std::move(__rv))
 587:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { }
 588:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 589:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 590:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__m)
 591:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 592:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__rv.get_allocator() == __m)
 593:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 594:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	else if (!__rv.empty())
 595:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 596:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 597:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    this->_M_impl._M_finish =
 598:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 599:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  this->_M_impl._M_start,
 600:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  _M_get_Tp_allocator());
 601:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    __rv.clear();
 602:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  }
 603:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 604:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 605:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
 606:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /// Move constructor with alternative allocator
 607:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 608:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       noexcept( noexcept(
 609:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 610:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 611:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 612:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { }
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 15


 613:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 614:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 615:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 616:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 617:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 618:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 619:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 620:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  initializer_list @a __l.
 621:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 622:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This will call the element type's copy constructor N times
 623:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 624:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 625:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(initializer_list<value_type> __l,
 626:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 627:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__a)
 628:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 629:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 630:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			    random_access_iterator_tag());
 631:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 632:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 633:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 634:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 635:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Builds a %vector from a range.
 636:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __first  An input iterator.
 637:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __last  An input iterator.
 638:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 639:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 640:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 641:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  [first,last).
 642:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 643:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 644:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  random-access, then this will call the elements' copy
 645:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 646:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 647:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 648:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  constructor, and logN memory reallocations.
 649:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 650:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 651:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator,
 652:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 653:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 654:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 655:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Base(__a)
 656:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
 657:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_range_initialize(__first, __last,
 658:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			      std::__iterator_category(__first));
 659:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
 660:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 661:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
 662:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 663:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 664:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Base(__a)
 665:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
 666:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 667:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 668:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 669:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 16


 670:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 671:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 672:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 673:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 674:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 675:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 676:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  responsibility.
 677:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 678:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 679:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 680:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 681:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		      _M_get_Tp_allocator());
 682:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 683:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 684:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 685:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 686:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  %Vector assignment operator.
 687:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 688:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 689:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 690:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @a __x will not be copied.
 691:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 692:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 693:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 694:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector&
 695:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       operator=(const vector& __x);
 696:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 697:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 698:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 699:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  %Vector move assignment operator.
 700:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 701:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 702:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 703:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  if the allocators permit it).
 704:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
 705:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 706:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 707:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 708:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector&
 709:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 710:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 711:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	constexpr bool __move_storage =
 712:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 713:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 714:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 715:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *this;
 716:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 717:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 718:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 719:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  %Vector list assignment operator.
 720:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 721:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 722:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 723:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  initializer list @a __l.
 724:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 725:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 726:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  that the resulting %vector's size is the same as the number
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 17


 727:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  of elements assigned.
 728:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 729:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector&
 730:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       operator=(initializer_list<value_type> __l)
 731:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 732:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 733:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			    random_access_iterator_tag());
 734:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *this;
 735:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 736:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 737:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 738:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 739:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 740:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 741:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __val  Value to be assigned.
 742:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 743:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 744:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  value.  Note that the assignment completely changes the
 745:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 746:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the number of elements assigned.
 747:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 748:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 749:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       assign(size_type __n, const value_type& __val)
 750:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_fill_assign(__n, __val); }
 751:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 752:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 753:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 754:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __first  An input iterator.
 755:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __last   An input iterator.
 756:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 757:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 758:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  range [__first,__last).
 759:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 760:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 761:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 762:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  of elements assigned.
 763:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 764:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 765:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator,
 766:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 767:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
 768:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 769:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ _M_assign_dispatch(__first, __last, __false_type()); }
 770:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 771:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
 772:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
 773:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 774:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
 775:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 776:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 777:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 778:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
 779:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 780:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 781:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 782:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 783:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 18


 784:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 785:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 786:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 787:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  initializer list @a __l.
 788:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 789:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 790:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 791:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  of elements assigned.
 792:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 793:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 794:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       assign(initializer_list<value_type> __l)
 795:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 796:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 797:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			    random_access_iterator_tag());
 798:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 799:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 800:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 801:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /// Get a copy of the memory allocation object.
 802:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       using _Base::get_allocator;
 803:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 804:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // iterators
 805:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 806:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read/write iterator that points to the first
 807:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 808:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element order.
 809:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 810:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
 811:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 812:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 813:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 814:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 815:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 816:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 817:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element order.
 818:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 819:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_iterator
 820:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 821:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 822:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 823:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 824:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 825:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 826:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element order.
 827:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 828:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
 829:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 830:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 831:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 832:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 833:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 834:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 835:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  ordinary element order.
 836:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 837:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_iterator
 838:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 839:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 840:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 19


 841:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 842:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 843:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 844:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element order.
 845:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 846:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       reverse_iterator
 847:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 848:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return reverse_iterator(end()); }
 849:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 850:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 851:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 852:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 853:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  reverse element order.
 854:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 855:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reverse_iterator
 856:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 857:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_reverse_iterator(end()); }
 858:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 859:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 860:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 861:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 862:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  in reverse element order.
 863:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 864:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       reverse_iterator
 865:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 866:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return reverse_iterator(begin()); }
 867:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 868:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 869:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 870:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 871:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  is done in reverse element order.
 872:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 873:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reverse_iterator
 874:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 875:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_reverse_iterator(begin()); }
 876:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 877:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 878:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 879:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 880:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 881:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element order.
 882:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 883:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_iterator
 884:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       cbegin() const noexcept
 885:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 886:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 887:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 888:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 889:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 890:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  ordinary element order.
 891:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 892:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_iterator
 893:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       cend() const noexcept
 894:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 895:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 896:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 897:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 20


 898:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 899:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  reverse element order.
 900:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 901:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reverse_iterator
 902:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       crbegin() const noexcept
 903:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_reverse_iterator(end()); }
 904:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 905:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 906:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 907:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 908:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  is done in reverse element order.
 909:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 910:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reverse_iterator
 911:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       crend() const noexcept
 912:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_reverse_iterator(begin()); }
 913:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 914:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 915:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // [23.2.4.2] capacity
 916:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 917:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       size_type
 918:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 919:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 920:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 921:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 922:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       size_type
 923:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 924:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
 925:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 926:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 927:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 928:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 929:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 930:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 931:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will %resize the %vector to the specified
 932:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  number of elements.  If the number is smaller than the
 933:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 934:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  default constructed elements are appended.
 935:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 936:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 937:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       resize(size_type __new_size)
 938:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 939:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__new_size > size())
 940:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_default_append(__new_size - size());
 941:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	else if (__new_size < size())
 942:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 943:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 944:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 945:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 946:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 947:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 948:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 949:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 950:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will %resize the %vector to the specified
 951:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  number of elements.  If the number is smaller than the
 952:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 953:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the %vector is extended and new elements are populated with
 954:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  given data.
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 21


 955:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 956:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 957:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 958:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 959:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__new_size > size())
 960:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 961:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	else if (__new_size < size())
 962:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 963:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 964:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 965:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 966:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 967:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 968:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 969:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 970:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will %resize the %vector to the specified
 971:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  number of elements.  If the number is smaller than the
 972:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 973:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the %vector is extended and new elements are populated with
 974:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  given data.
 975:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 976:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 977:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 979:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__new_size > size())
 980:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 981:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	else if (__new_size < size())
 982:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 983:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 984:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 985:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 986:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 987:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 988:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 989:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       shrink_to_fit()
 990:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_shrink_to_fit(); }
 991:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 992:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 993:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 994:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns the total number of elements that the %vector can
 995:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  hold before needing to allocate more memory.
 996:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 997:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       size_type
 998:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 999:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
1000:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			 - this->_M_impl._M_start); }
1001:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1002:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1003:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
1004:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  equal end().)
1005:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1006:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD bool
1007:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
1008:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return begin() == end(); }
1009:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1010:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1011:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 22


1012:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *          elements.
1013:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  Number of elements required.
1014:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
1015:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1016:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function attempts to reserve enough memory for the
1017:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
1018:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  number requested is more than max_size(), length_error is
1019:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  thrown.
1020:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1021:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The advantage of this function is that if optimal code is a
1022:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  necessity and the user can determine the number of elements
1023:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  that will be required, the user can reserve the memory in
1024:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
1025:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  and copying of %vector data.
1026:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1027:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1028:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       reserve(size_type __n);
1029:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1030:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // element access
1031:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1032:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1033:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1034:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  accessed.
1035:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  Read/write reference to data.
1036:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1037:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1038:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that data access with this operator is unchecked and
1039:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1040:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  see at().)
1041:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1042:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       reference
1043:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
 129              		.loc 2 1043 7 view .LVU31
 130              	.LBB279:
1044:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1045:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1046:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
 131              		.loc 2 1046 34 is_stmt 0 view .LVU32
 132 005a 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 133              	.LBE279:
 134              	.LBE278:
  31:Sequencer.cpp ****         if (seq.drum_sequence.snare_steps[current_step])   drum_synth.trigger_snare();
 135              		.loc 1 31 9 view .LVU33
 136 005c 16AA     		add	r2, sp, #88
 137 005e 5618     		adds	r6, r2, r1
 138              	.LBB282:
 139              	.LBB280:
 140              		.loc 2 1046 34 view .LVU34
 141 0060 03EB8301 		add	r1, r3, r3, lsl #2
 142              	.LVL9:
 143              		.loc 2 1046 34 view .LVU35
 144              	.LBE280:
 145              	.LBE282:
  30:Sequencer.cpp ****         if (seq.drum_sequence.kick_steps[current_step])    drum_synth.trigger_kick();
 146              		.loc 1 30 42 view .LVU36
 147 0064 5222     		movs	r2, #82
 148              	.LBB283:
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 23


 149              	.LBB281:
 150              		.loc 2 1046 34 view .LVU37
 151 0066 03EBC103 		add	r3, r3, r1, lsl #3
 152              	.LBE281:
 153              	.LBE283:
  30:Sequencer.cpp ****         if (seq.drum_sequence.kick_steps[current_step])    drum_synth.trigger_kick();
 154              		.loc 1 30 42 view .LVU38
 155 006a 8169     		ldr	r1, [r0, #24]
 156 006c 01A8     		add	r0, sp, #4
 157              	.LVL10:
  30:Sequencer.cpp ****         if (seq.drum_sequence.kick_steps[current_step])    drum_synth.trigger_kick();
 158              		.loc 1 30 42 view .LVU39
 159 006e 01EB4301 		add	r1, r1, r3, lsl #1
 160 0072 FFF7FEFF 		bl	memcpy
 161              	.LVL11:
  31:Sequencer.cpp ****         if (seq.drum_sequence.snare_steps[current_step])   drum_synth.trigger_snare();
 162              		.loc 1 31 9 is_stmt 1 view .LVU40
 163              	.LBB284:
 164              	.LBI284:
 165              		.file 3 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\array"
   1:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // <array> -*- C++ -*-
   2:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
   3:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** //
   5:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // software; you can redistribute it and/or modify it under the
   7:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // terms of the GNU General Public License as published by the
   8:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // any later version.
  10:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
  11:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // This library is distributed in the hope that it will be useful,
  12:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // GNU General Public License for more details.
  15:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
  16:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
  20:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // You should have received a copy of the GNU General Public License and
  21:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** // <http://www.gnu.org/licenses/>.
  24:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
  25:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** /** @file include/array
  26:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****  *  This is a Standard C++ Library header.
  27:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****  */
  28:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
  29:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** #ifndef _GLIBCXX_ARRAY
  30:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** #define _GLIBCXX_ARRAY 1
  31:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
  32:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** #pragma GCC system_header
  33:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
  34:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** #if __cplusplus < 201103L
  35:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** # include <bits/c++0x_warning.h>
  36:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** #else
  37:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 24


  38:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** #include <utility>
  39:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** #include <bits/functexcept.h>
  40:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** #include <bits/stl_algobase.h>
  41:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** #include <bits/range_access.h>
  42:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
  43:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** namespace std _GLIBCXX_VISIBILITY(default)
  44:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** {
  45:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  46:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
  47:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****   template<typename _Tp, std::size_t _Nm>
  48:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****     struct __array_traits
  49:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****     {
  50:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typedef _Tp _Type[_Nm];
  51:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typedef __is_swappable<_Tp> _Is_swappable;
  52:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;
  53:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
  54:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       static constexpr _Tp&
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _S_ref(const _Type& __t, std::size_t __n) noexcept
  56:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
  57:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
  58:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       static constexpr _Tp*
  59:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _S_ptr(const _Type& __t) noexcept
  60:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp*>(__t); }
  61:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****     };
  62:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
  63:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****  template<typename _Tp>
  64:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****    struct __array_traits<_Tp, 0>
  65:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****    {
  66:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****      struct _Type { };
  67:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****      typedef true_type _Is_swappable;
  68:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****      typedef true_type _Is_nothrow_swappable;
  69:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
  70:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****      static constexpr _Tp&
  71:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****      _S_ref(const _Type&, std::size_t) noexcept
  72:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****      { return *static_cast<_Tp*>(nullptr); }
  73:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
  74:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****      static constexpr _Tp*
  75:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****      _S_ptr(const _Type&) noexcept
  76:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****      { return nullptr; }
  77:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****    };
  78:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
  79:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****   /**
  80:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****    *  @brief A standard container for storing a fixed size sequence of elements.
  81:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****    *
  82:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****    *  @ingroup sequences
  83:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****    *
  84:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  85:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****    *  <a href="tables.html#66">reversible container</a>, and a
  86:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****    *  <a href="tables.html#67">sequence</a>.
  87:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****    *
  88:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****    *  Sets support random access iterators.
  89:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****    *
  90:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****    *  @tparam  Tp  Type of element. Required to be a complete type.
  91:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****    *  @tparam  Nm  Number of elements.
  92:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****   */
  93:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****   template<typename _Tp, std::size_t _Nm>
  94:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****     struct array
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 25


  95:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****     {
  96:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typedef _Tp 	    			      value_type;
  97:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typedef value_type*			      pointer;
  98:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typedef const value_type*                       const_pointer;
  99:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typedef value_type&                   	      reference;
 100:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typedef const value_type&             	      const_reference;
 101:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typedef value_type*          		      iterator;
 102:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typedef const value_type*			      const_iterator;
 103:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typedef std::size_t                    	      size_type;
 104:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typedef std::ptrdiff_t                   	      difference_type;
 105:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typedef std::reverse_iterator<iterator>	      reverse_iterator;
 106:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;
 107:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 108:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       // Support for zero-sized arrays mandatory.
 109:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typedef _GLIBCXX_STD_C::__array_traits<_Tp, _Nm> _AT_Type;
 110:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       typename _AT_Type::_Type                         _M_elems;
 111:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 112:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       // No explicit construct/copy/destroy for aggregate type.
 113:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 114:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       // DR 776.
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX20_CONSTEXPR void
 116:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       fill(const value_type& __u)
 117:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { std::fill_n(begin(), size(), __u); }
 118:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 119:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX20_CONSTEXPR void
 120:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       swap(array& __other)
 121:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       noexcept(_AT_Type::_Is_nothrow_swappable::value)
 122:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { std::swap_ranges(begin(), end(), __other.begin()); }
 123:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 124:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       // Iterators.
 125:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR iterator
 126:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       begin() noexcept
 127:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return iterator(data()); }
 128:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 129:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_iterator
 130:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       begin() const noexcept
 131:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_iterator(data()); }
 132:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 133:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR iterator
 134:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       end() noexcept
 135:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return iterator(data() + _Nm); }
 136:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 137:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_iterator
 138:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       end() const noexcept
 139:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_iterator(data() + _Nm); }
 140:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 141:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 142:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       rbegin() noexcept
 143:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return reverse_iterator(end()); }
 144:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 145:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 146:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       rbegin() const noexcept
 147:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_reverse_iterator(end()); }
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 149:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 150:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       rend() noexcept
 151:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return reverse_iterator(begin()); }
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 26


 152:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 153:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 154:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       rend() const noexcept
 155:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_reverse_iterator(begin()); }
 156:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 157:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_iterator
 158:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       cbegin() const noexcept
 159:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_iterator(data()); }
 160:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 161:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_iterator
 162:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       cend() const noexcept
 163:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_iterator(data() + _Nm); }
 164:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 165:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 166:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       crbegin() const noexcept
 167:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_reverse_iterator(end()); }
 168:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 169:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 170:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       crend() const noexcept
 171:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_reverse_iterator(begin()); }
 172:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 173:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       // Capacity.
 174:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       constexpr size_type
 175:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       size() const noexcept { return _Nm; }
 176:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 177:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       constexpr size_type
 178:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       max_size() const noexcept { return _Nm; }
 179:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 180:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX_NODISCARD constexpr bool
 181:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       empty() const noexcept { return size() == 0; }
 182:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array **** 
 183:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       // Element access.
 184:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR reference
 185:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       operator[](size_type __n) noexcept
 166              		.loc 3 185 7 view .LVU41
 167              	.LBB285:
 168              	.LBI285:
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 169              		.loc 3 55 7 view .LVU42
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 170              		.loc 3 55 7 is_stmt 0 view .LVU43
 171              	.LBE285:
 172              	.LBE284:
  31:Sequencer.cpp ****         if (seq.drum_sequence.snare_steps[current_step])   drum_synth.trigger_snare();
 173              		.loc 1 31 9 view .LVU44
 174 0076 16F8543C 		ldrb	r3, [r6, #-84]	@ zero_extendqisi2
 175 007a FBB9     		cbnz	r3, .L31
 176              	.L4:
  32:Sequencer.cpp ****         if (seq.drum_sequence.hat_steps[current_step])     drum_synth.trigger_hat();
 177              		.loc 1 32 9 is_stmt 1 view .LVU45
 178              	.LVL12:
 179              	.LBB286:
 180              	.LBI286:
 181              		.loc 3 185 7 view .LVU46
 182              	.LBB287:
 183              	.LBI287:
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 27


 184              		.loc 3 55 7 view .LVU47
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 185              		.loc 3 55 7 is_stmt 0 view .LVU48
 186              	.LBE287:
 187              	.LBE286:
  32:Sequencer.cpp ****         if (seq.drum_sequence.hat_steps[current_step])     drum_synth.trigger_hat();
 188              		.loc 1 32 9 view .LVU49
 189 007c 16F8343C 		ldrb	r3, [r6, #-52]	@ zero_extendqisi2
 190 0080 C3B9     		cbnz	r3, .L32
 191              	.L5:
  33:Sequencer.cpp **** 
 192              		.loc 1 33 9 is_stmt 1 view .LVU50
 193              	.LVL13:
 194              	.LBB288:
 195              	.LBI288:
 196              		.loc 3 185 7 view .LVU51
 197              	.LBB289:
 198              	.LBI289:
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 199              		.loc 3 55 7 view .LVU52
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 200              		.loc 3 55 7 is_stmt 0 view .LVU53
 201              	.LBE289:
 202              	.LBE288:
  33:Sequencer.cpp **** 
 203              		.loc 1 33 9 view .LVU54
 204 0082 16F8443C 		ldrb	r3, [r6, #-68]	@ zero_extendqisi2
 205 0086 8BB9     		cbnz	r3, .L33
 206              	.L6:
  35:Sequencer.cpp ****         if (groove) {
 207              		.loc 1 35 9 is_stmt 1 view .LVU55
 208              	.LBB290:
 209              	.LBB291:
 210              		.file 4 "ChordSynth.h"
   1:ChordSynth.h  **** #pragma once
   2:ChordSynth.h  **** #include "daisysp.h"
   3:ChordSynth.h  **** #include "InstrumentState.h"
   4:ChordSynth.h  **** #include "utils.h"
   5:ChordSynth.h  **** #include <vector>
   6:ChordSynth.h  **** 
   7:ChordSynth.h  **** using namespace daisysp;
   8:ChordSynth.h  **** 
   9:ChordSynth.h  **** class ChordSynth
  10:ChordSynth.h  **** {
  11:ChordSynth.h  **** public:
  12:ChordSynth.h  ****     ChordSynth(float sample_rate) : sample_rate(sample_rate) {};
  13:ChordSynth.h  **** 
  14:ChordSynth.h  ****     void set_chord(Chord chord);
  15:ChordSynth.h  ****     void set_bass_note(uint8_t scale_idx);
  16:ChordSynth.h  ****     float process();
  17:ChordSynth.h  **** 
  18:ChordSynth.h  ****     void enable()  {enabled  = true;}
 211              		.loc 4 18 30 is_stmt 0 view .LVU56
 212 0088 0123     		movs	r3, #1
 213              	.LBE291:
 214              	.LBE290:
  35:Sequencer.cpp ****         if (groove) {
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 28


 215              		.loc 1 35 9 view .LVU57
 216 008a 2069     		ldr	r0, [r4, #16]
 217              	.LVL14:
 218              	.LBB293:
 219              	.LBI290:
 220              		.loc 4 18 10 is_stmt 1 view .LVU58
 221              	.LBB292:
 222              		.loc 4 18 21 view .LVU59
 223              		.loc 4 18 30 is_stmt 0 view .LVU60
 224 008c 0371     		strb	r3, [r0, #4]
 225              	.LVL15:
 226              		.loc 4 18 30 view .LVU61
 227              	.LBE292:
 228              	.LBE293:
  36:Sequencer.cpp ****             chord_synth.set_bass_note(seq.bass_sequence[current_step]);
 229              		.loc 1 36 9 is_stmt 1 view .LVU62
 230 008e 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 231 0090 0BB9     		cbnz	r3, .L34
 232              	.L8:
 233              	.LBE277:
 234              	.LBE301:
  44:Sequencer.cpp ****     if (current_tick >= SAMPLES_IN_BAR)
 235              		.loc 1 44 5 is_stmt 0 discriminator 1 view .LVU63
 236 0092 A268     		ldr	r2, [r4, #8]
 237              	.LBB302:
 238 0094 D7E7     		b	.L3
 239              	.L34:
 240              	.LBB300:
  37:Sequencer.cpp ****             if (!seq.chord_sequence[current_step]) {
 241              		.loc 1 37 13 is_stmt 1 view .LVU64
 242              	.LVL16:
 243              	.LBB294:
 244              	.LBI294:
 245              		.loc 3 185 7 view .LVU65
 246              	.LBB295:
 247              	.LBI295:
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 248              		.loc 3 55 7 view .LVU66
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 249              		.loc 3 55 7 is_stmt 0 view .LVU67
 250              	.LBE295:
 251              	.LBE294:
  37:Sequencer.cpp ****             if (!seq.chord_sequence[current_step]) {
 252              		.loc 1 37 38 view .LVU68
 253 0096 16F8141C 		ldrb	r1, [r6, #-20]	@ zero_extendqisi2
 254 009a FFF7FEFF 		bl	_ZN10ChordSynth13set_bass_noteEh
 255              	.LVL17:
  38:Sequencer.cpp ****                 chord_synth.disable();
 256              		.loc 1 38 13 is_stmt 1 view .LVU69
 257              	.LBB296:
 258              	.LBI296:
 259              		.loc 3 185 7 view .LVU70
 260              	.LBB297:
 261              	.LBI297:
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 262              		.loc 3 55 7 view .LVU71
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 29


 263              		.loc 3 55 7 is_stmt 0 view .LVU72
 264              	.LBE297:
 265              	.LBE296:
  38:Sequencer.cpp ****                 chord_synth.disable();
 266              		.loc 1 38 13 view .LVU73
 267 009e 16F8243C 		ldrb	r3, [r6, #-36]	@ zero_extendqisi2
 268 00a2 002B     		cmp	r3, #0
 269 00a4 F5D1     		bne	.L8
  39:Sequencer.cpp ****             }
 270              		.loc 1 39 17 is_stmt 1 view .LVU74
 271              	.LVL18:
 272              	.LBB298:
 273              	.LBI298:
  19:ChordSynth.h  ****     void disable() {enabled  = false;}
 274              		.loc 4 19 10 view .LVU75
 275              	.LBB299:
 276              		.loc 4 19 21 view .LVU76
 277              		.loc 4 19 30 is_stmt 0 view .LVU77
 278 00a6 2269     		ldr	r2, [r4, #16]
 279 00a8 1371     		strb	r3, [r2, #4]
 280              		.loc 4 19 38 view .LVU78
 281 00aa F2E7     		b	.L8
 282              	.LVL19:
 283              	.L33:
 284              		.loc 4 19 38 view .LVU79
 285              	.LBE299:
 286              	.LBE298:
  33:Sequencer.cpp **** 
 287              		.loc 1 33 60 is_stmt 1 discriminator 1 view .LVU80
  33:Sequencer.cpp **** 
 288              		.loc 1 33 82 is_stmt 0 discriminator 1 view .LVU81
 289 00ac E068     		ldr	r0, [r4, #12]
 290 00ae FFF7FEFF 		bl	_ZN9DrumSynth11trigger_hatEv
 291              	.LVL20:
 292 00b2 E9E7     		b	.L6
 293              	.L32:
  32:Sequencer.cpp ****         if (seq.drum_sequence.hat_steps[current_step])     drum_synth.trigger_hat();
 294              		.loc 1 32 60 is_stmt 1 discriminator 1 view .LVU82
  32:Sequencer.cpp ****         if (seq.drum_sequence.hat_steps[current_step])     drum_synth.trigger_hat();
 295              		.loc 1 32 84 is_stmt 0 discriminator 1 view .LVU83
 296 00b4 E068     		ldr	r0, [r4, #12]
 297 00b6 FFF7FEFF 		bl	_ZN9DrumSynth13trigger_snareEv
 298              	.LVL21:
 299 00ba E2E7     		b	.L5
 300              	.L31:
  31:Sequencer.cpp ****         if (seq.drum_sequence.snare_steps[current_step])   drum_synth.trigger_snare();
 301              		.loc 1 31 60 is_stmt 1 discriminator 1 view .LVU84
  31:Sequencer.cpp ****         if (seq.drum_sequence.snare_steps[current_step])   drum_synth.trigger_snare();
 302              		.loc 1 31 83 is_stmt 0 discriminator 1 view .LVU85
 303 00bc E068     		ldr	r0, [r4, #12]
 304 00be FFF7FEFF 		bl	_ZN9DrumSynth12trigger_kickEv
 305              	.LVL22:
 306 00c2 DBE7     		b	.L4
 307              	.L36:
 308              		.align	2
 309              	.L35:
 310 00c4 00007043 		.word	1131413504
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 30


 311              	.LBE300:
 312              	.LBE302:
 313              		.cfi_endproc
 314              	.LFE4305:
 316              		.section	.text._ZN9Sequencer14scroll_patternEb,"ax",%progbits
 317              		.align	1
 318              		.p2align 2,,3
 319              		.global	_ZN9Sequencer14scroll_patternEb
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 323              		.fpu fpv5-d16
 325              	_ZN9Sequencer14scroll_patternEb:
 326              	.LVL23:
 327              	.LFB4306:
  48:Sequencer.cpp **** 
  49:Sequencer.cpp **** void Sequencer::scroll_pattern(bool direction) {
 328              		.loc 1 49 48 is_stmt 1 view -0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332              		@ link register save eliminated.
  50:Sequencer.cpp ****     if (direction) {
 333              		.loc 1 50 5 view .LVU87
 334 0000 A1B1     		cbz	r1, .L38
  51:Sequencer.cpp ****         sequence_idx++;
 335              		.loc 1 51 9 view .LVU88
 336              	.LBB303:
 337              	.LBB304:
 919:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 338              		.loc 2 919 50 is_stmt 0 view .LVU89
 339 0002 C369     		ldr	r3, [r0, #28]
 340              	.LBE304:
 341              	.LBE303:
 342              		.loc 1 51 21 view .LVU90
 343 0004 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 344              	.LBB309:
 345              	.LBB305:
 919:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 346              		.loc 2 919 50 view .LVU91
 347 0006 1349     		ldr	r1, .L46
 348              	.LVL24:
 919:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 349              		.loc 2 919 50 view .LVU92
 350              	.LBE305:
 351              	.LBE309:
 352              		.loc 1 51 21 view .LVU93
 353 0008 0132     		adds	r2, r2, #1
  49:Sequencer.cpp ****     if (direction) {
 354              		.loc 1 49 48 view .LVU94
 355 000a 10B4     		push	{r4}
 356              		.cfi_def_cfa_offset 4
 357              		.cfi_offset 4, -4
 358              	.LBB310:
 359              	.LBB306:
 919:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 360              		.loc 2 919 50 view .LVU95
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 31


 361 000c 8469     		ldr	r4, [r0, #24]
 362              	.LBE306:
 363              	.LBE310:
 364              		.loc 1 51 21 view .LVU96
 365 000e D2B2     		uxtb	r2, r2
 366              	.LBB311:
 367              	.LBB307:
 919:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 368              		.loc 2 919 50 view .LVU97
 369 0010 1B1B     		subs	r3, r3, r4
 370              	.LBE307:
 371              	.LBE311:
 372              		.loc 1 51 21 view .LVU98
 373 0012 0270     		strb	r2, [r0]
  52:Sequencer.cpp ****         if (sequence_idx >= sequences.size())
 374              		.loc 1 52 9 is_stmt 1 view .LVU99
 375              	.LVL25:
 376              	.LBB312:
 377              	.LBI303:
 918:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 378              		.loc 2 918 7 view .LVU100
 379              	.LBB308:
 919:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 380              		.loc 2 919 50 is_stmt 0 view .LVU101
 381 0014 5B10     		asrs	r3, r3, #1
 382 0016 01FB03F3 		mul	r3, r1, r3
 383              	.LBE308:
 384              	.LBE312:
 385              		.loc 1 52 9 view .LVU102
 386 001a 9A42     		cmp	r2, r3
 387 001c 01D3     		bcc	.L39
  53:Sequencer.cpp ****             sequence_idx = 0;
 388              		.loc 1 53 13 is_stmt 1 view .LVU103
 389              		.loc 1 53 26 is_stmt 0 view .LVU104
 390 001e 0023     		movs	r3, #0
 391 0020 0370     		strb	r3, [r0]
 392              	.L39:
  54:Sequencer.cpp ****     } else {
  55:Sequencer.cpp ****         if (sequence_idx == 0)
  56:Sequencer.cpp ****             sequence_idx = sequences.size() - 1;
  57:Sequencer.cpp ****         else
  58:Sequencer.cpp ****             sequence_idx--;
  59:Sequencer.cpp ****     }
  60:Sequencer.cpp **** 
  61:Sequencer.cpp ****     // Reset the current tick to the start of the new pattern
  62:Sequencer.cpp ****     current_tick = 0;
 393              		.loc 1 62 5 is_stmt 1 view .LVU105
 394              		.loc 1 62 18 is_stmt 0 view .LVU106
 395 0022 0023     		movs	r3, #0
  63:Sequencer.cpp **** }
 396              		.loc 1 63 1 view .LVU107
 397 0024 5DF8044B 		ldr	r4, [sp], #4
 398              		.cfi_restore 4
 399              		.cfi_def_cfa_offset 0
  62:Sequencer.cpp **** }
 400              		.loc 1 62 18 view .LVU108
 401 0028 8360     		str	r3, [r0, #8]
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 32


 402              		.loc 1 63 1 view .LVU109
 403 002a 7047     		bx	lr
 404              	.LVL26:
 405              	.L38:
  55:Sequencer.cpp ****             sequence_idx = sequences.size() - 1;
 406              		.loc 1 55 9 is_stmt 1 view .LVU110
  55:Sequencer.cpp ****             sequence_idx = sequences.size() - 1;
 407              		.loc 1 55 13 is_stmt 0 view .LVU111
 408 002c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  55:Sequencer.cpp ****             sequence_idx = sequences.size() - 1;
 409              		.loc 1 55 9 view .LVU112
 410 002e 23B1     		cbz	r3, .L45
  58:Sequencer.cpp ****     }
 411              		.loc 1 58 13 is_stmt 1 view .LVU113
  58:Sequencer.cpp ****     }
 412              		.loc 1 58 25 is_stmt 0 view .LVU114
 413 0030 013B     		subs	r3, r3, #1
 414 0032 0370     		strb	r3, [r0]
  62:Sequencer.cpp **** }
 415              		.loc 1 62 5 is_stmt 1 view .LVU115
  62:Sequencer.cpp **** }
 416              		.loc 1 62 18 is_stmt 0 view .LVU116
 417 0034 0023     		movs	r3, #0
 418 0036 8360     		str	r3, [r0, #8]
 419 0038 7047     		bx	lr
 420              	.L45:
  56:Sequencer.cpp ****         else
 421              		.loc 1 56 13 is_stmt 1 view .LVU117
 422              	.LVL27:
 423              	.LBB313:
 424              	.LBI313:
 918:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 425              		.loc 2 918 7 view .LVU118
 426              	.LBB314:
 919:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 427              		.loc 2 919 50 is_stmt 0 view .LVU119
 428 003a D0E90613 		ldrd	r1, r3, [r0, #24]
 429              	.LVL28:
 919:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 430              		.loc 2 919 50 view .LVU120
 431 003e 054A     		ldr	r2, .L46
 432 0040 5B1A     		subs	r3, r3, r1
 433 0042 5B10     		asrs	r3, r3, #1
 434 0044 02FB03F3 		mul	r3, r2, r3
 435              	.LBE314:
 436              	.LBE313:
  56:Sequencer.cpp ****         else
 437              		.loc 1 56 45 view .LVU121
 438 0048 013B     		subs	r3, r3, #1
  56:Sequencer.cpp ****         else
 439              		.loc 1 56 26 view .LVU122
 440 004a 0370     		strb	r3, [r0]
  62:Sequencer.cpp **** }
 441              		.loc 1 62 5 is_stmt 1 view .LVU123
  62:Sequencer.cpp **** }
 442              		.loc 1 62 18 is_stmt 0 view .LVU124
 443 004c 0023     		movs	r3, #0
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 33


 444 004e 8360     		str	r3, [r0, #8]
 445 0050 7047     		bx	lr
 446              	.L47:
 447 0052 00BF     		.align	2
 448              	.L46:
 449 0054 199C8FC1 		.word	-1047552999
 450              		.cfi_endproc
 451              	.LFE4306:
 453              		.section	.rodata._ZNSt6vectorIN9Sequencer8SequenceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_c
 454              		.align	2
 455              	.LC10:
 456 0000 76656374 		.ascii	"vector::_M_realloc_insert\000"
 456      6F723A3A 
 456      5F4D5F72 
 456      65616C6C 
 456      6F635F69 
 457              		.section	.text._ZNSt6vectorIN9Sequencer8SequenceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx
 458              		.align	1
 459              		.p2align 2,,3
 460              		.weak	_ZNSt6vectorIN9Sequencer8SequenceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__norma
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 464              		.fpu fpv5-d16
 466              	_ZNSt6vectorIN9Sequencer8SequenceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_itera
 467              	.LVL29:
 468              	.LFB5010:
 469              		.file 5 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\vector.tcc"
   1:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
   3:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** //
   5:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // terms of the GNU General Public License as published by the
   8:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // any later version.
  10:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
  11:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // This library is distributed in the hope that it will be useful,
  12:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // GNU General Public License for more details.
  15:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
  16:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
  20:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // You should have received a copy of the GNU General Public License and
  21:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // <http://www.gnu.org/licenses/>.
  24:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
  25:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** /*
  26:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  *
  27:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * Copyright (c) 1994
  28:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * Hewlett-Packard Company
  29:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  *
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 34


  30:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * provided that the above copyright notice appear in all copies and
  33:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * that both that copyright notice and this permission notice appear
  34:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * representations about the suitability of this software for any
  36:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  *
  38:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  *
  39:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * Copyright (c) 1996
  40:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  *
  42:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * provided that the above copyright notice appear in all copies and
  45:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * that both that copyright notice and this permission notice appear
  46:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * representations about the suitability of this  software for any
  48:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  */
  50:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
  51:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** /** @file bits/vector.tcc
  52:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  *  This is an internal header file, included by other library headers.
  53:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  54:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  */
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
  56:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #ifndef _VECTOR_TCC
  57:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #define _VECTOR_TCC 1
  58:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
  59:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** {
  61:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  63:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
  64:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
  65:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     void
  66:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
  67:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     reserve(size_type __n)
  68:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
  69:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (__n > this->max_size())
  70:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  71:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (this->capacity() < __n)
  72:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	{
  73:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  const size_type __old_size = size();
  74:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  pointer __tmp;
  75:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
  76:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
  77:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
  78:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      __tmp = this->_M_allocate(__n);
  79:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
  80:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			  __tmp, _M_get_Tp_allocator());
  81:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
  82:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  else
  83:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
  84:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
  85:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      __tmp = _M_allocate_and_copy(__n,
  86:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 35


  87:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  88:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  89:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			    _M_get_Tp_allocator());
  90:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
  91:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
  92:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  93:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			this->_M_impl._M_end_of_storage
  94:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			- this->_M_impl._M_start);
  95:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  this->_M_impl._M_start = __tmp;
  96:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  97:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  98:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	}
  99:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 100:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 101:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 102:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 103:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     template<typename... _Args>
 104:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus > 201402L
 105:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       typename vector<_Tp, _Alloc>::reference
 106:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 107:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       void
 108:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 109:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 110:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       emplace_back(_Args&&... __args)
 111:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       {
 112:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 113:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  {
 114:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 116:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				     std::forward<_Args>(__args)...);
 117:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    ++this->_M_impl._M_finish;
 118:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 119:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  }
 120:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	else
 121:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 122:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus > 201402L
 123:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	return back();
 124:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 125:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       }
 126:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 127:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 128:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 129:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 130:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 131:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 132:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     insert(const_iterator __position, const value_type& __x)
 133:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 134:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     insert(iterator __position, const value_type& __x)
 135:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 136:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
 137:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       const size_type __n = __position - begin();
 138:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 139:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	if (__position == end())
 140:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  {
 141:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 142:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 143:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				     __x);
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 36


 144:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    ++this->_M_impl._M_finish;
 145:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 146:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  }
 147:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	else
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  {
 149:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 150:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    const auto __pos = begin() + (__position - cbegin());
 151:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    // __x could be an existing element of this vector, so make a
 152:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    // copy of it before _M_insert_aux moves elements around.
 153:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _Temporary_value __x_copy(this, __x);
 154:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _M_insert_aux(__pos, std::move(__x_copy._M_val()));
 155:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 156:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _M_insert_aux(__position, __x);
 157:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 158:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  }
 159:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       else
 160:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 161:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	_M_realloc_insert(begin() + (__position - cbegin()), __x);
 162:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 163:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	_M_realloc_insert(__position, __x);
 164:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 165:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 166:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 167:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 168:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 169:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 170:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 171:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 172:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     _M_erase(iterator __position)
 173:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
 174:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (__position + 1 != end())
 175:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 176:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       --this->_M_impl._M_finish;
 177:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 178:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
 179:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       return __position;
 180:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 181:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 182:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 183:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 184:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 185:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     _M_erase(iterator __first, iterator __last)
 186:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
 187:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (__first != __last)
 188:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	{
 189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  if (__last != end())
 190:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_MOVE3(__last, end(), __first);
 191:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_erase_at_end(__first.base() + (end() - __last));
 192:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	}
 193:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       return __first;
 194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 195:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 196:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 197:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>&
 198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 199:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 200:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 37


 201:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (&__x != this)
 202:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	{
 203:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
 204:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 205:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 206:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
 207:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      if (!_Alloc_traits::_S_always_equal()
 208:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 209:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	        {
 210:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		  // replacement allocator cannot free existing storage
 211:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		  this->clear();
 212:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		  _M_deallocate(this->_M_impl._M_start,
 213:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				this->_M_impl._M_end_of_storage
 214:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				- this->_M_impl._M_start);
 215:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		  this->_M_impl._M_start = nullptr;
 216:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		  this->_M_impl._M_finish = nullptr;
 217:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		  this->_M_impl._M_end_of_storage = nullptr;
 218:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		}
 219:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 220:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				   __x._M_get_Tp_allocator());
 221:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 222:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 223:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  const size_type __xlen = __x.size();
 224:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  if (__xlen > capacity())
 225:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
 226:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 227:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 						   __x.end());
 228:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 229:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			    _M_get_Tp_allocator());
 230:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 231:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			    this->_M_impl._M_end_of_storage
 232:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			    - this->_M_impl._M_start);
 233:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 234:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 235:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 236:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  else if (size() >= __xlen)
 237:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
 238:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 239:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			    end(), _M_get_Tp_allocator());
 240:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 241:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  else
 242:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
 243:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 244:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			this->_M_impl._M_start);
 245:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 246:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					  __x._M_impl._M_finish,
 247:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					  this->_M_impl._M_finish,
 248:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					  _M_get_Tp_allocator());
 249:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 250:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 251:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	}
 252:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       return *this;
 253:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 254:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 255:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 256:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     void
 257:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 38


 258:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     _M_fill_assign(size_t __n, const value_type& __val)
 259:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
 260:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (__n > capacity())
 261:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	{
 262:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  vector __tmp(__n, __val, _M_get_Tp_allocator());
 263:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  __tmp._M_impl._M_swap_data(this->_M_impl);
 264:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	}
 265:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       else if (__n > size())
 266:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	{
 267:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  std::fill(begin(), end(), __val);
 268:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  const size_type __add = __n - size();
 269:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_GROW(__add);
 270:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  this->_M_impl._M_finish =
 271:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 272:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					  __add, __val, _M_get_Tp_allocator());
 273:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_GREW(__add);
 274:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	}
 275:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       else
 276:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 277:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 278:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 279:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 280:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     template<typename _InputIterator>
 281:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       void
 282:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 283:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 284:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		    std::input_iterator_tag)
 285:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       {
 286:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	pointer __cur(this->_M_impl._M_start);
 287:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	for (; __first != __last && __cur != this->_M_impl._M_finish;
 288:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	     ++__cur, (void)++__first)
 289:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  *__cur = *__first;
 290:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	if (__first == __last)
 291:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_erase_at_end(__cur);
 292:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	else
 293:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_range_insert(end(), __first, __last,
 294:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			  std::__iterator_category(__first));
 295:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       }
 296:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 297:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 298:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     template<typename _ForwardIterator>
 299:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       void
 300:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 301:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 302:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		    std::forward_iterator_tag)
 303:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       {
 304:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	const size_type __len = std::distance(__first, __last);
 305:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 306:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	if (__len > capacity())
 307:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  {
 308:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _S_check_init_len(__len, _M_get_Tp_allocator());
 309:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 310:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 311:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			  _M_get_Tp_allocator());
 312:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
 313:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _M_deallocate(this->_M_impl._M_start,
 314:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			  this->_M_impl._M_end_of_storage
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 39


 315:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			  - this->_M_impl._M_start);
 316:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    this->_M_impl._M_start = __tmp;
 317:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 318:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 319:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  }
 320:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	else if (size() >= __len)
 321:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 322:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	else
 323:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  {
 324:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _ForwardIterator __mid = __first;
 325:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    std::advance(__mid, size());
 326:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    std::copy(__first, __mid, this->_M_impl._M_start);
 327:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    const size_type __attribute__((__unused__)) __n = __len - size();
 328:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
 329:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    this->_M_impl._M_finish =
 330:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      std::__uninitialized_copy_a(__mid, __last,
 331:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					  this->_M_impl._M_finish,
 332:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					  _M_get_Tp_allocator());
 333:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
 334:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  }
 335:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       }
 336:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 337:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 338:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 339:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     auto
 340:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 341:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
 342:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
 343:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       const auto __n = __position - cbegin();
 344:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 345:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	if (__position == cend())
 346:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  {
 347:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 348:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 349:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				     std::move(__v));
 350:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    ++this->_M_impl._M_finish;
 351:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 352:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  }
 353:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	else
 354:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_insert_aux(begin() + __n, std::move(__v));
 355:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       else
 356:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	_M_realloc_insert(begin() + __n, std::move(__v));
 357:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 358:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 359:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 360:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 361:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 362:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     template<typename... _Args>
 363:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       auto
 364:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 365:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _M_emplace_aux(const_iterator __position, _Args&&... __args)
 366:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       -> iterator
 367:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       {
 368:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	const auto __n = __position - cbegin();
 369:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 370:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  if (__position == cend())
 371:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 40


 372:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 373:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 374:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				       std::forward<_Args>(__args)...);
 375:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      ++this->_M_impl._M_finish;
 376:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 377:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 378:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  else
 379:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
 380:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      // We need to construct a temporary because something in __args...
 381:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      // could alias one of the elements of the container and so we
 382:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      // need to use it before _M_insert_aux moves elements around.
 383:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
 384:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
 385:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 386:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	else
 387:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);
 388:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 389:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	return iterator(this->_M_impl._M_start + __n);
 390:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       }
 391:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 392:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 393:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     template<typename _Arg>
 394:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       void
 395:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 396:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _M_insert_aux(iterator __position, _Arg&& __arg)
 397:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 398:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 399:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     void
 400:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 401:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 402:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 403:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
 404:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 405:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 406:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			       _GLIBCXX_MOVE(*(this->_M_impl._M_finish - 1)));
 407:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       ++this->_M_impl._M_finish;
 408:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 409:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus < 201103L
 410:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _Tp __x_copy = __x;
 411:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 412:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 413:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			      this->_M_impl._M_finish - 2,
 414:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			      this->_M_impl._M_finish - 1);
 415:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus < 201103L
 416:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       *__position = __x_copy;
 417:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 418:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       *__position = std::forward<_Arg>(__arg);
 419:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 420:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 421:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 422:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 423:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 424:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     template<typename... _Args>
 425:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       void
 426:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 470              		.loc 5 426 7 is_stmt 1 view -0
 471              		.cfi_startproc
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 41


 472              		@ args = 0, pretend = 0, frame = 8
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474              		.loc 5 426 7 is_stmt 0 view .LVU126
 475 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 476              		.cfi_def_cfa_offset 36
 477              		.cfi_offset 4, -36
 478              		.cfi_offset 5, -32
 479              		.cfi_offset 6, -28
 480              		.cfi_offset 7, -24
 481              		.cfi_offset 8, -20
 482              		.cfi_offset 9, -16
 483              		.cfi_offset 10, -12
 484              		.cfi_offset 11, -8
 485              		.cfi_offset 14, -4
 486 0004 D0E900A7 		ldrd	r10, r7, [r0]
 487 0008 0E46     		mov	r6, r1
 488              	.LVL30:
 489              	.LBB368:
 490              	.LBI368:
1047:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1048:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1049:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1050:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1051:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1052:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  accessed.
1053:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1054:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1055:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1056:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that data access with this operator is unchecked and
1057:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1058:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  see at().)
1059:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1060:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reference
1061:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
1062:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1063:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1064:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1065:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1066:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1067:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     protected:
1068:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /// Safety check used only from at().
1069:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1070:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_range_check(size_type __n) const
1071:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1072:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__n >= this->size())
1073:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
1074:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				       "(which is %zu) >= this->size() "
1075:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				       "(which is %zu)"),
1076:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				   __n, this->size());
1077:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1078:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1079:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
1080:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1081:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1082:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1083:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  accessed.
1084:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  Read/write reference to data.
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 42


1085:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1086:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1087:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function provides for safer data access.  The parameter
1088:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1089:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  function throws out_of_range if the check fails.
1090:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1091:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       reference
1092:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       at(size_type __n)
1093:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1094:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_check(__n);
1095:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return (*this)[__n];
1096:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1097:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1098:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1099:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1100:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1101:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  accessed.
1102:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1103:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1104:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1105:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function provides for safer data access.  The parameter
1106:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1107:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  function throws out_of_range if the check fails.
1108:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1109:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reference
1110:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       at(size_type __n) const
1111:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1112:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_check(__n);
1113:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return (*this)[__n];
1114:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1116:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1117:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read/write reference to the data at the first
1118:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element of the %vector.
1119:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1120:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       reference
1121:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
1122:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1123:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1124:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *begin();
1125:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1126:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1127:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1128:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
1129:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element of the %vector.
1130:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1131:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reference
1132:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
1133:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1134:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1135:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *begin();
1136:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1137:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1138:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1139:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read/write reference to the data at the last
1140:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element of the %vector.
1141:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 43


1142:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       reference
1143:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
1144:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1145:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1146:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *(end() - 1);
1147:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1149:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1150:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
1151:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  last element of the %vector.
1152:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1153:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reference
1154:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
1155:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1156:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1157:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *(end() - 1);
1158:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1159:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1160:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1161:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
1162:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // data access
1163:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1164:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
1165:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
1166:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1167:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Tp*
1168:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
1169:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1170:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1171:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const _Tp*
1172:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
1173:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1174:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1175:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // [23.2.4.3] modifiers
1176:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1177:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Add data to the end of the %vector.
1178:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be added.
1179:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1180:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This is a typical stack operation.  The function creates an
1181:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element at the end of the %vector and assigns the given data
1182:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
1183:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  done in constant time if the %vector has preallocated space
1184:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  available.
1185:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1186:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1187:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       push_back(const value_type& __x)
1188:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
1190:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
1191:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
1192:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
1193:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				     __x);
1194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    ++this->_M_impl._M_finish;
1195:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
1196:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  }
1197:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	else
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_realloc_insert(end(), __x);
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 44


1199:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1200:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1201:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1202:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1203:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       push_back(value_type&& __x)
1204:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { emplace_back(std::move(__x)); }
1205:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1206:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename... _Args>
1207:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus > 201402L
1208:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	reference
1209:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1210:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1211:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1212:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	emplace_back(_Args&&... __args);
1213:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1214:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1215:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1216:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Removes last element.
1217:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1218:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
1219:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1220:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that no data is returned, and if the last element's
1221:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
1222:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  called.
1223:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1224:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1225:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
1226:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1227:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1228:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	--this->_M_impl._M_finish;
1229:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
1230:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
1231:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1232:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1233:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1234:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1235:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
1236:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1237:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __args  Arguments.
1238:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1239:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1240:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert an object of type T constructed
1241:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
1242:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
1243:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  and if it is frequently used the user should consider using
1244:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  std::list.
1245:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1246:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename... _Args>
1247:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	iterator
1248:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	emplace(const_iterator __position, _Args&&... __args)
1249:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
1250:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1251:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1252:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1253:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1254:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1255:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 45


1256:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1257:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert a copy of the given value before
1258:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the specified location.  Note that this kind of operation
1259:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1260:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  used the user should consider using std::list.
1261:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1262:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1263:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
1264:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1265:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1266:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1267:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1268:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1269:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1270:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1271:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert a copy of the given value before
1272:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the specified location.  Note that this kind of operation
1273:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1274:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  used the user should consider using std::list.
1275:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1276:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1277:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       insert(iterator __position, const value_type& __x);
1278:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1279:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1280:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1281:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1282:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1283:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1284:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1285:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1286:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1287:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1288:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the specified location.  Note that this kind of operation
1289:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1290:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  used the user should consider using std::list.
1291:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1292:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1293:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1294:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _M_insert_rval(__position, std::move(__x)); }
1295:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1296:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1297:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1298:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1299:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
1300:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1301:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert copies of the data in the
1302:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1303:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  specified by @a position.
1304:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1305:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1306:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1307:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  consider using std::list.
1308:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1309:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1310:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1311:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1312:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	auto __offset = __position - cbegin();
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 46


1313:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_insert(begin() + __offset, __l.begin(), __l.end(),
1314:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			std::random_access_iterator_tag());
1315:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return begin() + __offset;
1316:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1317:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1318:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1319:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1320:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1321:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1322:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1323:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1324:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1325:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1326:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1327:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert a specified number of copies of
1328:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the given data before the location specified by @a position.
1329:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1330:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1331:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1332:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  consider using std::list.
1333:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1334:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1335:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1336:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1337:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	difference_type __offset = __position - cbegin();
1338:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1339:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return begin() + __offset;
1340:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1341:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1342:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1343:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1344:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1345:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1346:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1347:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1348:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert a specified number of copies of
1349:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the given data before the location specified by @a position.
1350:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1351:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1352:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1353:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  consider using std::list.
1354:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1355:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1356:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1357:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1358:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1359:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1360:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1361:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1362:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1363:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1364:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __first  An input iterator.
1365:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __last   An input iterator.
1366:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1367:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1368:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert copies of the data in the range
1369:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 47


1370:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  by @a pos.
1371:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1372:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1373:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1374:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  consider using std::list.
1375:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1376:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator,
1377:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1378:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	iterator
1379:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	insert(const_iterator __position, _InputIterator __first,
1380:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       _InputIterator __last)
1381:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1382:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1383:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1384:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			     __first, __last, __false_type());
1385:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  return begin() + __offset;
1386:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1387:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1388:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1389:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1390:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1391:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __first  An input iterator.
1392:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __last   An input iterator.
1393:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1394:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert copies of the data in the range
1395:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1396:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  by @a pos.
1397:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1398:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1399:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1400:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  consider using std::list.
1401:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1402:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1403:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1404:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	insert(iterator __position, _InputIterator __first,
1405:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       _InputIterator __last)
1406:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1407:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1408:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1409:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1410:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1411:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1412:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1413:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1414:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Remove element at given position.
1415:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1416:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1417:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1418:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will erase the element at the given position and thus
1419:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  shorten the %vector by one.
1420:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1421:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note This operation could be expensive and if it is
1422:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  frequently used the user should consider using std::list.
1423:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The user is also cautioned that this function only erases
1424:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1425:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1426:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the pointer is the user's responsibility.
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 48


1427:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1428:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1429:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1430:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       erase(const_iterator __position)
1431:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1432:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1433:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       erase(iterator __position)
1434:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _M_erase(__position); }
1435:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1436:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1437:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1438:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Remove a range of elements.
1439:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1440:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1441:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *                  erased.
1442:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1443:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *           prior to erasing (or end()).
1444:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1445:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will erase the elements in the range
1446:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1447:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1448:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note This operation could be expensive and if it is
1449:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  frequently used the user should consider using std::list.
1450:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The user is also cautioned that this function only erases
1451:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the elements, and that if the elements themselves are
1452:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1453:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1454:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1455:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1456:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1457:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1458:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1459:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	const auto __beg = begin();
1460:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	const auto __cbeg = cbegin();
1461:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1462:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1463:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1464:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       erase(iterator __first, iterator __last)
1465:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _M_erase(__first, __last); }
1466:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1467:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1468:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1469:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Swaps data with another %vector.
1470:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1471:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1472:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1473:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1474:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1475:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1476:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1477:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Whether the allocators are swapped depends on the allocator traits.
1478:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1479:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1480:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       swap(vector& __x) _GLIBCXX_NOEXCEPT
1481:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1482:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1483:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 49


1484:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			 || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());
1485:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1486:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1487:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1488:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				  __x._M_get_Tp_allocator());
1489:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1490:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1491:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1492:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1493:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1494:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1495:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the user's responsibility.
1496:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1497:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1498:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1499:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1500:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1501:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     protected:
1502:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1503:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1504:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1505:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1506:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _ForwardIterator>
1507:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	pointer
1508:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_allocate_and_copy(size_type __n,
1509:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1510:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1511:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1512:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __try
1513:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
1514:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1515:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  _M_get_Tp_allocator());
1516:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      return __result;
1517:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    }
1518:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __catch(...)
1519:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
1520:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _M_deallocate(__result, __n);
1521:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      __throw_exception_again;
1522:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    }
1523:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1524:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1525:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1526:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Internal constructor functions follow.
1527:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1528:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1529:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1530:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus < 201103L
1531:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1532:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1533:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _Integer>
1534:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1535:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1536:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1537:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(_S_check_init_len(
1538:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		static_cast<size_type>(__n), _M_get_Tp_allocator()));
1539:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1540:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 50


1541:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1542:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1543:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1544:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1545:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1546:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1547:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1548:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			       __false_type)
1549:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1550:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_range_initialize(__first, __last,
1551:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			      std::__iterator_category(__first));
1552:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1553:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1554:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1555:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the second initialize_dispatch above
1556:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1557:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1558:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_initialize(_InputIterator __first, _InputIterator __last,
1559:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			    std::input_iterator_tag)
1560:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1561:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __try {
1562:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    for (; __first != __last; ++__first)
1563:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1564:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      emplace_back(*__first);
1565:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1566:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      push_back(*__first);
1567:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1568:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  } __catch(...) {
1569:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    clear();
1570:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    __throw_exception_again;
1571:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  }
1572:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1573:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1574:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the second initialize_dispatch above
1575:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _ForwardIterator>
1576:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1577:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
1578:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			    std::forward_iterator_tag)
1579:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1580:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1581:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_start
1582:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
1583:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1584:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_finish =
1585:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1586:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					this->_M_impl._M_start,
1587:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					_M_get_Tp_allocator());
1588:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1589:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1590:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1591:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // vector(n,value,a) constructor.
1592:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1593:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1594:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1595:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish =
1596:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
1597:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					_M_get_Tp_allocator());
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 51


1598:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1599:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1600:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1601:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the vector(n) constructor.
1602:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1603:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_default_initialize(size_type __n)
1604:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1605:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish =
1606:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
1607:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					   _M_get_Tp_allocator());
1608:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1609:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1610:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1611:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1612:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // assignment work for the range versions.
1613:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1614:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1615:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1616:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1617:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1618:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _Integer>
1619:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1620:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1621:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ _M_fill_assign(__n, __val); }
1622:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1623:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1624:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1625:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1626:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1627:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			   __false_type)
1628:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
1629:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1630:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the second assign_dispatch above
1631:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1632:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1633:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_assign_aux(_InputIterator __first, _InputIterator __last,
1634:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		      std::input_iterator_tag);
1635:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1636:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the second assign_dispatch above
1637:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _ForwardIterator>
1638:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1639:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1640:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		      std::forward_iterator_tag);
1641:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1642:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1643:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // to be the same thing.
1644:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1645:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1646:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1647:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Internal insert functions follow.
1648:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1649:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1650:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1651:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1652:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1653:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _Integer>
1654:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 52


1655:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1656:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			   __true_type)
1657:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ _M_fill_insert(__pos, __n, __val); }
1658:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1659:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1660:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1661:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1662:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _InputIterator __first,
1663:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			   _InputIterator __last, __false_type)
1664:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1665:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_range_insert(__pos, __first, __last,
1666:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			  std::__iterator_category(__first));
1667:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1668:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1669:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the second insert_dispatch above
1670:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1671:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1672:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_insert(iterator __pos, _InputIterator __first,
1673:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1674:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1675:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the second insert_dispatch above
1676:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _ForwardIterator>
1677:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1678:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_insert(iterator __pos, _ForwardIterator __first,
1679:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1680:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1681:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1682:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // the same thing.
1683:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1684:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1685:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1686:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1687:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by resize(n).
1688:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1689:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_default_append(size_type __n);
1690:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1691:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       bool
1692:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_shrink_to_fit();
1693:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1694:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1695:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus < 201103L
1696:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by insert(p,x)
1697:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1698:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1699:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1700:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1701:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_realloc_insert(iterator __position, const value_type& __x);
1702:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1703:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // A value_type object constructed with _Alloc_traits::construct()
1704:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // and destroyed with _Alloc_traits::destroy().
1705:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       struct _Temporary_value
1706:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1707:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	template<typename... _Args>
1708:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  explicit
1709:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
1710:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
1711:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 53


1712:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				     std::forward<_Args>(__args)...);
1713:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  }
1714:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1715:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	~_Temporary_value()
1716:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
1717:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1718:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	value_type&
1719:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_val() { return *_M_ptr(); }
1720:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1721:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       private:
1722:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Tp*
1723:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_ptr() { return reinterpret_cast<_Tp*>(&__buf); }
1724:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1725:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	vector* _M_this;
1726:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
1727:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       };
1728:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1729:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by insert(p,x) and other functions when insertion needs to
1730:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // reallocate or move existing elements. _Arg is either _Tp& or _Tp.
1731:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _Arg>
1732:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1733:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_insert_aux(iterator __position, _Arg&& __arg);
1734:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1735:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename... _Args>
1736:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1737:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_realloc_insert(iterator __position, _Args&&... __args);
1738:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1739:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Either move-construct at the end, or forward to _M_insert_aux.
1740:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1741:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_insert_rval(const_iterator __position, value_type&& __v);
1742:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1743:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Try to emplace at the end, otherwise forward to _M_insert_aux.
1744:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename... _Args>
1745:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	iterator
1746:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_emplace_aux(const_iterator __position, _Args&&... __args);
1747:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1748:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Emplacing an rvalue of the correct type can use _M_insert_rval.
1749:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1750:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_emplace_aux(const_iterator __position, value_type&& __v)
1751:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _M_insert_rval(__position, std::move(__v)); }
1752:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1753:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1754:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by _M_fill_insert, _M_insert_aux etc.
1755:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       size_type
1756:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
 491              		.loc 2 1756 7 is_stmt 1 view .LVU127
 492              	.LBB369:
 493              	.LBB370:
 494              	.LBI370:
 918:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 495              		.loc 2 918 7 view .LVU128
 496              	.LBE370:
 497              	.LBE369:
 498              	.LBE368:
 499              		.loc 5 426 7 is_stmt 0 view .LVU129
 500 000a 1146     		mov	r1, r2
 501              	.LBB378:
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 54


 502              	.LBB375:
 503              	.LBB373:
 504              	.LBB371:
 919:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 505              		.loc 2 919 50 view .LVU130
 506 000c A7EB0A03 		sub	r3, r7, r10
 507 0010 3A4A     		ldr	r2, .L69
 508              	.LVL31:
 919:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 509              		.loc 2 919 50 view .LVU131
 510              	.LBE371:
 511              	.LBE373:
1757:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1758:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (max_size() - size() < __n)
 512              		.loc 2 1758 2 view .LVU132
 513 0012 3B4C     		ldr	r4, .L69+4
 514              	.LBE375:
 515              	.LBE378:
 516              		.loc 5 426 7 view .LVU133
 517 0014 83B0     		sub	sp, sp, #12
 518              		.cfi_def_cfa_offset 48
 519              	.LBB379:
 520              	.LBB376:
 521              	.LBB374:
 522              	.LBB372:
 919:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 523              		.loc 2 919 50 view .LVU134
 524 0016 5B10     		asrs	r3, r3, #1
 525 0018 02FB03F3 		mul	r3, r2, r3
 919:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 526              		.loc 2 919 50 view .LVU135
 527              	.LBE372:
 528              	.LBE374:
 529              		.loc 2 1758 2 view .LVU136
 530 001c A342     		cmp	r3, r4
 531 001e 69D0     		beq	.L67
 532 0020 012B     		cmp	r3, #1
 533 0022 9846     		mov	r8, r3
 534 0024 8146     		mov	r9, r0
 535              	.LBE376:
 536              	.LBE379:
 537              	.LBB380:
 538              	.LBB381:
 539              		.file 6 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\stl_iterato
   1:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // Iterators -*- C++ -*-
   2:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
   3:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** //
   5:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // any later version.
  10:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  11:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 55


  14:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // GNU General Public License for more details.
  15:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  16:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  20:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  25:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** /*
  26:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *
  27:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * Copyright (c) 1994
  28:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * Hewlett-Packard Company
  29:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *
  30:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * representations about the suitability of this software for any
  36:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *
  38:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *
  39:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * Copyright (c) 1996-1998
  40:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *
  42:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * representations about the suitability of this software for any
  48:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  */
  50:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  51:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** /** @file bits/stl_iterator.h
  52:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  */
  59:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  60:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  63:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #include <ext/type_traits.h>
  65:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #include <bits/move.h>
  66:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #include <bits/ptr_traits.h>
  67:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  68:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus >= 201103L
  69:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # include <type_traits>
  70:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 56


  71:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  72:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L
  73:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # define __cpp_lib_array_constexpr 201811L
  74:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # define __cpp_lib_constexpr_iterator 201811L
  75:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #elif __cplusplus == 201703L
  76:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # define __cpp_lib_array_constexpr 201803L
  77:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
  78:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  79:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L
  80:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # include <compare>
  81:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # include <new>
  82:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # include <bits/iterator_concepts.h>
  83:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
  84:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  85:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  86:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** {
  87:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  88:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  89:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
  90:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    * @addtogroup iterators
  91:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    * @{
  92:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    */
  93:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  94:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
  95:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   namespace __detail
  96:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   {
  97:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     // Weaken iterator_category _Cat to _Limit if it is derived from that,
  98:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     // otherwise use _Otherwise.
  99:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     template<typename _Cat, typename _Limit, typename _Otherwise = _Cat>
 100:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using __clamp_iter_cat
 101:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	= conditional_t<derived_from<_Cat, _Limit>, _Limit, _Otherwise>;
 102:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   }
 103:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 104:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 105:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // 24.4.1 Reverse iterators
 106:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 107:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
 108:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
 109:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
 110:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
 111:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
 112:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @code
 113:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
 114:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @endcode
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 116:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
 117:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
 118:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
 119:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 120:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
 121:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
 122:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  the requirement that the iterators must be safe.
 123:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
 124:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 125:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     class reverse_iterator
 126:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
 127:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 57


 128:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 129:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 130:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 131:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     {
 132:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     protected:
 133:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Iterator current;
 134:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 135:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 136:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 137:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     public:
 138:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef _Iterator					iterator_type;
 139:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 140:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 141:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 142:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 143:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
 144:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using iterator_concept
 145:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	= conditional_t<random_access_iterator<_Iterator>,
 146:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 			random_access_iterator_tag,
 147:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 			bidirectional_iterator_tag>;
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using iterator_category
 149:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	= __detail::__clamp_iter_cat<typename __traits_type::iterator_category,
 150:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 				     random_access_iterator_tag>;
 151:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 152:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 153:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 154:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 155:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 156:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 157:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 158:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 159:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       // 1012. reverse_iterator default ctor should value initialize
 160:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 161:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       reverse_iterator() : current() { }
 162:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 163:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 164:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 165:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 166:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       explicit _GLIBCXX17_CONSTEXPR
 167:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 168:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 169:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 170:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The copy constructor is normal.
 171:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 172:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 173:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 174:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : current(__x.current) { }
 175:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 176:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus >= 201103L
 177:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       reverse_iterator& operator=(const reverse_iterator&) = default;
 178:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 179:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 180:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 181:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 182:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 183:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 184:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       template<typename _Iter>
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 58


 185:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 186:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 187:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	: current(__x.base()) { }
 188:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 190:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 191:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 192:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR iterator_type
 193:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       base() const
 194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return current; }
 195:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 196:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 197:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  A reference to the value at @c --current
 198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 199:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 200:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 201:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 202:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 203:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 204:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 205:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 206:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 207:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator*() const
 208:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 209:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	_Iterator __tmp = current;
 210:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *--__tmp;
 211:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 212:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 213:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 214:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 215:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 216:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 217:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 218:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR pointer
 219:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator->() const
 220:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_concepts >= 201907L
 221:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       requires is_pointer_v<_Iterator>
 222:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	|| requires(const _Iterator __i) { __i.operator->(); }
 223:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 224:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 225:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 226:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	// 1052. operator-> should also support smart pointers
 227:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	_Iterator __tmp = current;
 228:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	--__tmp;
 229:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return _S_to_pointer(__tmp);
 230:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 231:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 232:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 233:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  @c *this
 234:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 235:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  Decrements the underlying iterator.
 236:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 237:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 238:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++()
 239:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 240:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	--current;
 241:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 59


 242:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 243:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 244:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 245:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  The original value of @c *this
 246:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 247:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  Decrements the underlying iterator.
 248:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 249:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 250:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++(int)
 251:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 252:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	reverse_iterator __tmp = *this;
 253:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	--current;
 254:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return __tmp;
 255:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 256:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 257:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 258:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  @c *this
 259:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 260:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  Increments the underlying iterator.
 261:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 262:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 263:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator--()
 264:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 265:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	++current;
 266:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 267:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 268:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 269:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 270:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 271:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 272:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  Increments the underlying iterator.
 273:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 274:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 275:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator--(int)
 276:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 277:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	reverse_iterator __tmp = *this;
 278:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	++current;
 279:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return __tmp;
 280:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 281:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 282:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 283:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 284:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 285:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 286:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 287:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 288:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator+(difference_type __n) const
 289:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return reverse_iterator(current - __n); }
 290:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 291:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 292:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  *this
 293:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 294:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 295:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 296:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 297:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 298:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator+=(difference_type __n)
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 60


 299:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 300:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	current -= __n;
 301:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 302:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 303:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 304:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 305:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 306:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 307:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 308:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 309:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 310:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator-(difference_type __n) const
 311:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return reverse_iterator(current + __n); }
 312:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 313:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 314:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  *this
 315:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 316:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 317:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 318:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 319:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 320:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator-=(difference_type __n)
 321:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 322:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	current += __n;
 323:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 324:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 325:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 326:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 327:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 328:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 329:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 330:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 331:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 332:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator[](difference_type __n) const
 333:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *(*this + __n); }
 334:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 335:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
 336:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       friend constexpr iter_rvalue_reference_t<_Iterator>
 337:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       iter_move(const reverse_iterator& __i)
 338:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       noexcept(is_nothrow_copy_constructible_v<_Iterator>
 339:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       && noexcept(ranges::iter_move(--std::declval<_Iterator&>())))
 340:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 341:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	auto __tmp = __i.base();
 342:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return ranges::iter_move(--__tmp);
 343:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 344:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 345:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       template<indirectly_swappable<_Iterator> _Iter2>
 346:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	friend constexpr void
 347:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	iter_swap(const reverse_iterator& __x,
 348:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		  const reverse_iterator<_Iter2>& __y)
 349:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	noexcept(is_nothrow_copy_constructible_v<_Iterator>
 350:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		 && is_nothrow_copy_constructible_v<_Iter2>
 351:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		 && noexcept(ranges::iter_swap(--std::declval<_Iterator&>(),
 352:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 					       --std::declval<_Iter2&>())))
 353:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	{
 354:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	  auto __xtmp = __x.base();
 355:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	  auto __ytmp = __y.base();
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 61


 356:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	  ranges::iter_swap(--__xtmp, --__ytmp);
 357:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	}
 358:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 359:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 360:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     private:
 361:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       template<typename _Tp>
 362:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR _Tp*
 363:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	_S_to_pointer(_Tp* __p)
 364:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****         { return __p; }
 365:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 366:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       template<typename _Tp>
 367:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR pointer
 368:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	_S_to_pointer(_Tp __t)
 369:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****         { return __t.operator->(); }
 370:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     };
 371:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 372:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   //@{
 373:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 374:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 375:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 376:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @return  A simple bool.
 377:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 378:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Reverse iterators forward comparisons to their underlying base()
 379:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  iterators.
 380:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 381:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
 382:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus <= 201703L || ! defined __cpp_lib_concepts
 383:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 384:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 385:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 386:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 387:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 388:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 389:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 390:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 391:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 392:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 393:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y.base() < __x.base(); }
 394:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 395:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 396:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 397:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 398:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 399:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return !(__x == __y); }
 400:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 401:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 402:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 403:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 404:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 405:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y < __x; }
 406:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 407:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 408:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 409:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 410:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 411:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return !(__y < __x); }
 412:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 62


 413:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 414:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 415:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 416:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 417:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return !(__x < __y); }
 418:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 419:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 420:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 421:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 422:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 423:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 424:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 425:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 426:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 427:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 428:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 429:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 430:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 431:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y.base() < __x.base(); }
 432:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 433:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 434:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 435:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 436:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 437:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return !(__x == __y); }
 438:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 439:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 440:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 441:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 442:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 443:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y < __x; }
 444:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 445:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 446:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 447:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 448:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 449:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return !(__y < __x); }
 450:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 451:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 452:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 453:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 454:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 455:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return !(__x < __y); }
 456:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else // C++20
 457:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 458:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr bool
 459:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 460:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 461:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() == __y.base() } -> convertible_to<bool>; }
 462:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 463:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 464:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 465:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr bool
 466:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 467:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 468:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() != __y.base() } -> convertible_to<bool>; }
 469:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() != __y.base(); }
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 63


 470:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 471:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 472:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr bool
 473:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 474:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 475:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() > __y.base() } -> convertible_to<bool>; }
 476:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() > __y.base(); }
 477:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 478:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 479:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr bool
 480:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 481:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 482:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() < __y.base() } -> convertible_to<bool>; }
 483:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() < __y.base(); }
 484:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 485:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 486:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr bool
 487:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 488:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 489:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() >= __y.base() } -> convertible_to<bool>; }
 490:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() >= __y.base(); }
 491:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 492:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 493:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr bool
 494:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 495:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 496:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() <= __y.base() } -> convertible_to<bool>; }
 497:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() <= __y.base(); }
 498:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 499:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL,
 500:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	   three_way_comparable_with<_IteratorL> _IteratorR>
 501:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr compare_three_way_result_t<_IteratorL, _IteratorR>
 502:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<=>(const reverse_iterator<_IteratorL>& __x,
 503:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		const reverse_iterator<_IteratorR>& __y)
 504:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y.base() <=> __x.base(); }
 505:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif // C++20
 506:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   //@}
 507:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 508:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus < 201103L
 509:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 510:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 511:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 512:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 513:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y.base() - __x.base(); }
 514:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 515:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 516:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 517:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 518:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 519:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y.base() - __x.base(); }
 520:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
 521:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 522:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // DR 685. reverse_iterator/move_iterator difference has invalid signatures
 523:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 524:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR auto
 525:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 526:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 64


 527:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 528:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y.base() - __x.base(); }
 529:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 530:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 531:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 532:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 533:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 534:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 535:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 536:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 537:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus >= 201103L
 538:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // Same as C++14 make_reverse_iterator but used in C++11 mode too.
 539:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 540:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 541:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     __make_reverse_iterator(_Iterator __i)
 542:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 543:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 544:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # if __cplusplus >= 201402L
 545:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #  define __cpp_lib_make_reverse_iterator 201402
 546:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 547:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 548:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // DR 2285. make_reverse_iterator
 549:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /// Generator function for reverse_iterator.
 550:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 551:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 552:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 553:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 554:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 555:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #  if __cplusplus > 201703L && defined __cpp_lib_concepts
 556:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator1, typename _Iterator2>
 557:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires (!sized_sentinel_for<_Iterator1, _Iterator2>)
 558:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline constexpr bool
 559:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     disable_sized_sentinel_for<reverse_iterator<_Iterator1>,
 560:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 			       reverse_iterator<_Iterator2>> = true;
 561:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #  endif // C++20
 562:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # endif // C++14
 563:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 564:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 565:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 566:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     auto
 567:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     __niter_base(reverse_iterator<_Iterator> __it)
 568:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
 569:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __make_reverse_iterator(__niter_base(__it.base())); }
 570:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 571:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 572:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     struct __is_move_iterator<reverse_iterator<_Iterator> >
 573:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : __is_move_iterator<_Iterator>
 574:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { };
 575:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 576:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 577:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 578:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     auto
 579:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     __miter_base(reverse_iterator<_Iterator> __it)
 580:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
 581:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __make_reverse_iterator(__miter_base(__it.base())); }
 582:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif // C++11
 583:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 65


 584:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 585:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 586:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 587:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 588:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 589:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 590:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  push_back.
 591:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 592:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 593:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  save typing.
 594:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
 595:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Container>
 596:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     class back_insert_iterator
 597:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 598:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     {
 599:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     protected:
 600:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Container* container;
 601:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 602:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     public:
 603:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 604:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef _Container          container_type;
 605:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L
 606:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using difference_type = ptrdiff_t;
 607:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 608:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       constexpr back_insert_iterator() noexcept : container(nullptr) { }
 609:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 610:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 611:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 612:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 613:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       back_insert_iterator(_Container& __x)
 614:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : container(std::__addressof(__x)) { }
 615:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 616:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 617:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @param  __value  An instance of whatever type
 618:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 619:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *                 reference-to-const T for container<T>.
 620:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 621:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 622:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 623:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  container (you can think of the position as being permanently at
 624:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 625:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  always append the value to the end of the container.
 626:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 627:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus < 201103L
 628:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       back_insert_iterator&
 629:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 630:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 631:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	container->push_back(__value);
 632:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 633:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 634:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
 635:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 636:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       back_insert_iterator&
 637:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 638:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 639:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	container->push_back(__value);
 640:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 66


 641:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 642:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 643:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 644:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       back_insert_iterator&
 645:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 646:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 647:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	container->push_back(std::move(__value));
 648:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 649:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 650:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 651:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 652:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.
 653:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 654:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       back_insert_iterator&
 655:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator*()
 656:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 657:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 658:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 659:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 660:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       back_insert_iterator&
 661:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++()
 662:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 663:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 664:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 665:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 666:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       back_insert_iterator
 667:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++(int)
 668:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 669:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     };
 670:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 671:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 672:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 673:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 674:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 675:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 676:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 677:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 678:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 679:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 680:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  types for you.
 681:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
 682:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Container>
 683:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 684:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline back_insert_iterator<_Container>
 685:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     back_inserter(_Container& __x)
 686:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 687:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 688:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 689:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 690:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 691:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 692:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 693:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  push_front.
 694:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 695:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 696:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  save typing.
 697:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 67


 698:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Container>
 699:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     class front_insert_iterator
 700:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 701:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     {
 702:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     protected:
 703:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Container* container;
 704:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 705:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     public:
 706:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 707:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef _Container          container_type;
 708:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L
 709:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using difference_type = ptrdiff_t;
 710:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 711:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       constexpr front_insert_iterator() noexcept : container(nullptr) { }
 712:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 713:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 714:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 715:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 716:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       front_insert_iterator(_Container& __x)
 717:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : container(std::__addressof(__x)) { }
 718:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 719:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 720:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @param  __value  An instance of whatever type
 721:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 722:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *                 reference-to-const T for container<T>.
 723:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 724:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 725:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 726:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  container (you can think of the position as being permanently at
 727:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 728:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  always prepend the value to the front of the container.
 729:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 730:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus < 201103L
 731:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       front_insert_iterator&
 732:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 733:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 734:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	container->push_front(__value);
 735:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 736:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 737:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
 738:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 739:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       front_insert_iterator&
 740:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 741:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 742:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	container->push_front(__value);
 743:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 744:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 745:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 746:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 747:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       front_insert_iterator&
 748:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 749:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 750:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	container->push_front(std::move(__value));
 751:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 752:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 753:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 754:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 68


 755:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.
 756:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 757:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       front_insert_iterator&
 758:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator*()
 759:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 760:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 761:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 762:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 763:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       front_insert_iterator&
 764:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++()
 765:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 766:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 767:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 768:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 769:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       front_insert_iterator
 770:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++(int)
 771:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 772:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     };
 773:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 774:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 775:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 776:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 777:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 778:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 779:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 780:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 781:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 782:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 783:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  types for you.
 784:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
 785:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Container>
 786:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 787:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline front_insert_iterator<_Container>
 788:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     front_inserter(_Container& __x)
 789:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 790:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 791:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 792:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 793:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 794:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 795:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 796:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 797:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  position.
 798:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 799:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 800:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  %iterator's position.)
 801:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 802:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 803:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  save typing.
 804:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
 805:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Container>
 806:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     class insert_iterator
 807:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 808:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     {
 809:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 810:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using _Iter = std::__detail::__range_iter_t<_Container>;
 811:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 69


 812:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     protected:
 813:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Container* container = nullptr;
 814:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Iter iter = _Iter();
 815:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
 816:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename _Container::iterator		_Iter;
 817:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 818:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     protected:
 819:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Container* container;
 820:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Iter iter;
 821:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 822:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 823:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     public:
 824:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 825:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef _Container          container_type;
 826:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 827:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 828:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using difference_type = ptrdiff_t;
 829:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 830:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator() = default;
 831:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 832:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 833:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 834:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 835:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 836:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 837:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 838:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator(_Container& __x, _Iter __i)
 839:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : container(std::__addressof(__x)), iter(__i) {}
 840:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 841:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 842:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @param  __value  An instance of whatever type
 843:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 844:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *                 reference-to-const T for container<T>.
 845:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 846:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 847:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 848:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 849:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  value into the container at the place before the %iterator.
 850:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 851:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 852:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  insert values immediately after one another.  For example,
 853:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @code
 854:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *     // vector v contains A and Z
 855:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 856:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 857:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *     i = 1;
 858:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *     i = 2;
 859:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *     i = 3;
 860:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 861:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 862:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @endcode
 863:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 864:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus < 201103L
 865:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator&
 866:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 867:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 868:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	iter = container->insert(iter, __value);
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 70


 869:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	++iter;
 870:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 871:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 872:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
 873:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 874:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator&
 875:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 876:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 877:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	iter = container->insert(iter, __value);
 878:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	++iter;
 879:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 880:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 881:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 882:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 883:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator&
 884:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 885:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 886:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 887:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	++iter;
 888:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 889:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 890:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 891:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 892:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.
 893:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 894:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator&
 895:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator*()
 896:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 897:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 898:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 899:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 900:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator&
 901:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++()
 902:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 903:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 904:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 905:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 906:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator&
 907:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++(int)
 908:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 909:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     };
 910:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 911:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 912:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 913:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @param __i  An iterator into the container.
 914:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 915:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 916:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 917:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 918:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 919:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 920:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 921:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  types for you.
 922:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
 923:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 924:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Container>
 925:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr insert_iterator<_Container>
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 71


 926:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inserter(_Container& __x, std::__detail::__range_iter_t<_Container> __i)
 927:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return insert_iterator<_Container>(__x, __i); }
 928:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
 929:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Container, typename _Iterator>
 930:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline insert_iterator<_Container>
 931:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 932:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     {
 933:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       return insert_iterator<_Container>(__x,
 934:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 					 typename _Container::iterator(__i));
 935:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     }
 936:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 937:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 938:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // @} group iterators
 939:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 940:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 941:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** } // namespace
 942:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 943:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 944:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** {
 945:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 946:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 947:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 948:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 949:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 950:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 951:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 952:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // using this template can instantiate different types, even if the
 953:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // _Iterator parameter is the same.
 954:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
 955:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     class __normal_iterator
 956:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     {
 957:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     protected:
 958:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Iterator _M_current;
 959:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 960:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef std::iterator_traits<_Iterator>		__traits_type;
 961:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 962:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     public:
 963:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef _Iterator					iterator_type;
 964:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 965:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 966:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 967:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 968:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 969:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 970:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
 971:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using iterator_concept = std::__detail::__iter_concept<_Iterator>;
 972:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 973:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 974:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 975:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(_Iterator()) { }
 976:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 977:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 979:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 980:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 981:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       // Allow iterator to const_iterator conversion
 982:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       template<typename _Iter>
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 72


 983:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****         _GLIBCXX20_CONSTEXPR
 984:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 985:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 			  typename __enable_if<
 986:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 987:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 988:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****         : _M_current(__i.base()) { }
 989:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 990:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       // Forward iterator requirements
 991:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 992:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       reference
 993:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
 994:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *_M_current; }
 995:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 996:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 997:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       pointer
 998:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
 999:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return _M_current; }
1000:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1001:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1002:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator&
1003:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
1004:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
1005:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	++_M_current;
1006:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
1007:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
1008:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1009:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1010:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator
1011:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
1012:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return __normal_iterator(_M_current++); }
1013:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1014:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       // Bidirectional iterator requirements
1015:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1016:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator&
1017:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
1018:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
1019:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	--_M_current;
1020:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
1021:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
1022:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1023:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1024:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator
1025:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
1026:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return __normal_iterator(_M_current--); }
1027:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1028:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       // Random access iterator requirements
1029:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1030:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       reference
1031:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
1032:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return _M_current[__n]; }
1033:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1034:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1035:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator&
1036:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
1037:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { _M_current += __n; return *this; }
1038:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1039:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 73


1040:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator
1041:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
1042:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
1043:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1044:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1045:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator&
1046:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
1047:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { _M_current -= __n; return *this; }
1048:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1049:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1050:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator
1051:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
1052:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
1053:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1054:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1055:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       const _Iterator&
1056:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
1057:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return _M_current; }
1058:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     };
1059:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1060:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
1061:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
1062:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
1063:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
1064:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
1065:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
1066:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
1067:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1068:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cpp_lib_three_way_comparison
1069:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1070:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires requires (_IteratorL __lhs, _IteratorR __rhs)
1071:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { { __lhs == __rhs } -> std::convertible_to<bool>; }
1072:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr bool
1073:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
1074:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1075:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     noexcept(noexcept(__lhs.base() == __rhs.base()))
1076:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1077:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1078:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1079:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr std::__detail::__synth3way_t<_IteratorR, _IteratorL>
1080:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<=>(const __normal_iterator<_IteratorL, _Container>& __lhs,
1081:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		const __normal_iterator<_IteratorR, _Container>& __rhs)
1082:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))
1083:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
1084:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
1085:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    // Forward iterator requirements
1086:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1087:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1088:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1089:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
1090:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1091:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1092:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1093:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1094:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1095:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1096:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 74


1097:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
1098:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1099:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1100:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1101:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1102:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1103:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1104:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1105:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1106:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1107:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1108:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
1109:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1110:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1111:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1112:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1113:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
1114:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1116:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
1117:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1118:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // Random access iterator requirements
1119:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1120:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1121:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
1122:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
1123:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1124:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
1125:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1126:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1127:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1128:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1129:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
1130:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
1131:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1132:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
1133:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1134:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1135:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1136:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
1137:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
1138:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1139:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
1140:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1141:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1142:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1143:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1144:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
1145:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
1146:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1147:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
1148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1149:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1150:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1151:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1152:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1153:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 75


1154:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
1155:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1156:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1157:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1158:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1159:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
1160:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1161:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1162:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
1163:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1164:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1165:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1166:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1167:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1168:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1169:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
1170:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1171:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1172:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1173:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1174:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
1175:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1176:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1177:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
1178:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif // three-way comparison
1179:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1180:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1181:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // According to the resolution of DR179 not only the various comparison
1182:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // operators but also operator- must accept mixed iterator/const_iterator
1183:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // parameters.
1184:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1185:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus >= 201103L
1186:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     // DR 685.
1187:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1188:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline auto
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
1190:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
1191:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     -> decltype(__lhs.base() - __rhs.base())
1192:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
1193:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline typename __normal_iterator<_IteratorL, _Container>::difference_type
1194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
1195:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
1196:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
1197:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1199:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1200:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1201:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline typename __normal_iterator<_Iterator, _Container>::difference_type
1202:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
1203:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
1204:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1205:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 540              		.loc 6 1205 27 view .LVU137
 541 0026 A6EB0A05 		sub	r5, r6, r10
 542 002a 38BF     		it	cc
 543 002c 4FF00108 		movcc	r8, #1
 544 0030 18EB0303 		adds	r3, r8, r3
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 76


 545 0034 5CD2     		bcs	.L51
 546              	.LVL32:
 547              		.loc 6 1205 27 view .LVU138
 548              	.LBE381:
 549              	.LBE380:
 550              	.LBB383:
 551              	.LBI383:
 811:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 552              		.loc 2 811 7 is_stmt 1 view .LVU139
 553              	.LBB384:
 554              	.LBI384:
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 555              		.loc 6 978 7 view .LVU140
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 556              		.loc 6 978 7 is_stmt 0 view .LVU141
 557              	.LBE384:
 558              	.LBE383:
 559              	.LBB386:
 560              	.LBI380:
1202:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 561              		.loc 6 1202 5 is_stmt 1 view .LVU142
1202:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 562              		.loc 6 1202 5 is_stmt 0 view .LVU143
 563              	.LBE386:
 564              	.LBB387:
 565              	.LBI387:
 343:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 566              		.loc 2 343 7 is_stmt 1 view .LVU144
 567              	.LBB388:
 346:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 568              		.loc 2 346 18 is_stmt 0 view .LVU145
 569 0036 002B     		cmp	r3, #0
 570 0038 49D1     		bne	.L68
 571 003a 5224     		movs	r4, #82
 572 003c 9B46     		mov	fp, r3
 573 003e 0093     		str	r3, [sp]
 574              	.LVL33:
 575              	.L59:
 346:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 576              		.loc 2 346 18 view .LVU146
 577              	.LBE388:
 578              	.LBE387:
 579              	.LBB401:
 580              	.LBI401:
 581              		.file 7 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\alloc_trait
   1:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
   3:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // Copyright (C) 2011-2020 Free Software Foundation, Inc.
   4:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** //
   5:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // any later version.
  10:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  11:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 77


  13:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // GNU General Public License for more details.
  15:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  16:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  20:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  25:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** /** @file bits/alloc_traits.h
  26:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****  */
  29:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  30:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  33:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #include <bits/stl_construct.h>
  34:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #include <bits/memoryfwd.h>
  35:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201103L
  36:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** # include <bits/allocator.h>
  37:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** # include <bits/ptr_traits.h>
  38:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** # include <ext/numeric_traits.h>
  39:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
  40:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  41:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** {
  43:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  45:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201103L
  46:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  47:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  48:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   struct __allocator_traits_base
  49:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   {
  50:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  51:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  52:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  53:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp, typename _Up>
  54:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       struct __rebind<_Tp, _Up,
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  56:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  57:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  58:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   protected:
  59:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  60:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  61:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  62:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  63:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  64:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  65:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  66:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  67:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  68:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  69:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 78


  70:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  71:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  72:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  73:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  74:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  75:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   };
  76:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  77:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc, typename _Up>
  78:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     using __alloc_rebind
  79:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  80:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  81:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   /**
  82:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  83:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****    * @ingroup allocators
  84:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   */
  85:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
  86:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  87:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
  88:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator type
  89:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef _Alloc allocator_type;
  90:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocated type
  91:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  92:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  93:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
  94:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's pointer type.
  95:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
  96:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
  97:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
  98:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
  99:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 100:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     private:
 101:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
 102:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 103:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Ptr
 104:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 105:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 106:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	};
 107:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 108:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 109:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 110:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 111:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  using type = _Func<_Alloc>;
 112:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	};
 113:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 114:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 116:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Diff
 117:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 118:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 119:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _PtrT>
 120:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 121:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 122:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 123:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 124:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 125:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 126:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 79


 127:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _DiffT>
 128:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 129:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 130:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 131:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     public:
 132:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 133:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's const pointer type.
 134:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 135:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 136:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 137:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 138:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 139:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 140:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 141:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's void pointer type.
 142:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 143:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 144:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 145:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 146:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 147:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 149:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 150:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 151:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 152:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 153:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 154:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 155:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 156:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 157:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's difference type
 158:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 159:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 160:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 161:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 162:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 163:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 164:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 165:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's size type
 166:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 167:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 168:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 169:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 170:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 171:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 172:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 173:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 174:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 175:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 176:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * otherwise @c false_type
 177:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 178:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_copy_assignment
 179:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 180:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 181:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 182:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 183:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 80


 184:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 185:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * otherwise @c false_type
 186:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 187:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_move_assignment
 188:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 190:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 191:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 192:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 193:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * otherwise @c false_type
 195:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 196:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_swap
 197:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 199:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 200:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 201:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 202:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 203:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 204:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 205:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using is_always_equal
 206:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 207:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 208:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp>
 209:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 210:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp>
 211:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 212:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 213:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     private:
 214:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 215:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr auto
 216:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 217:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 218:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 219:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 220:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 221:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr pointer
 222:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 223:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ return __a.allocate(__n); }
 224:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 225:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 226:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct __construct_helper
 227:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 228:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  template<typename _Alloc2,
 229:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 230:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 231:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	    static true_type __test(int);
 232:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 233:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  template<typename>
 234:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	    static false_type __test(...);
 235:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 236:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 237:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	};
 238:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 239:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 240:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	using __has_construct
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 81


 241:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 242:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 243:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 244:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR _Require<__has_construct<_Tp, _Args...>>
 245:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 246:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 247:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 248:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 249:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 250:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR
 251:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 252:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 253:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 254:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 255:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 256:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 257:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 258:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 259:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 260:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 261:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	}
 262:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 263:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 264:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR auto
 265:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 266:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 267:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 268:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ __a.destroy(__p); }
 269:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 270:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 271:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR void
 272:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 273:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(std::is_nothrow_destructible<_Tp>::value)
 274:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ std::_Destroy(__p); }
 275:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 276:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 277:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr auto
 278:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 279:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	-> decltype(__a.max_size())
 280:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ return __a.max_size(); }
 281:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 282:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 283:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr size_type
 284:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 285:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 286:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 287:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 288:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 289:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	    / sizeof(value_type);
 290:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	}
 291:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 292:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 293:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr auto
 294:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 295:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 296:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 297:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 82


 298:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 299:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr _Alloc2
 300:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 301:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ return __a; }
 302:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 303:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     public:
 304:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 305:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 306:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 307:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 308:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 309:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 310:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls @c a.allocate(n)
 311:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 312:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 313:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 314:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return __a.allocate(__n); }
 315:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 316:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 317:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 318:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 319:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 320:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __hint Aid to locality.
 321:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 322:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *          of type @c value_type
 323:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 324:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 325:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 326:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 327:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 328:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 329:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 330:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 331:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 332:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Deallocate memory.
 333:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 334:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 335:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 336:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 337:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 338:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 339:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 340:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 341:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 342:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 343:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 344:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Construct an object of type @a _Tp
 345:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 346:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 347:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __args Constructor arguments.
 348:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 349:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 350:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 351:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 352:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  arguments @a __args...
 353:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 354:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 83


 355:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR auto
 356:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 357:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 358:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 359:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 360:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 361:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 362:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 363:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 364:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 365:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 366:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 367:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 368:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 369:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 370:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp>
 371:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 372:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	destroy(_Alloc& __a, _Tp* __p)
 373:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 374:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 375:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 376:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 377:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  The maximum supported allocation size
 378:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 379:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 380:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 381:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 382:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 383:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 384:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 385:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       max_size(const _Alloc& __a) noexcept
 386:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return _S_max_size(__a, 0); }
 387:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 388:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 389:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 390:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __rhs  An allocator.
 391:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 392:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 393:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 394:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 395:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 396:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR _Alloc
 397:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 398:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return _S_select(__rhs, 0); }
 399:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     };
 400:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 401:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus > 201703L
 402:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** # define __cpp_lib_constexpr_dynamic_alloc 201907L
 403:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 404:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 405:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   /// Partial specialization for std::allocator.
 406:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Tp>
 407:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 408:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
 409:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator type
 410:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 411:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 84


 412:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocated type
 413:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using value_type = _Tp;
 414:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 415:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's pointer type.
 416:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using pointer = _Tp*;
 417:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 418:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's const pointer type.
 419:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using const_pointer = const _Tp*;
 420:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 421:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's void pointer type.
 422:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using void_pointer = void*;
 423:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 424:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's const void pointer type.
 425:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using const_void_pointer = const void*;
 426:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 427:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's difference type
 428:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 429:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 430:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's size type
 431:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using size_type = std::size_t;
 432:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 433:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 434:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 435:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 436:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// How the allocator is propagated on move assignment
 437:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 438:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 439:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// How the allocator is propagated on swap
 440:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_swap = false_type;
 441:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 442:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 443:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using is_always_equal = true_type;
 444:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 445:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Up>
 446:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 447:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 448:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Up>
 449:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 450:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 451:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 452:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 453:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 454:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 455:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 456:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls @c a.allocate(n)
 457:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 458:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 459:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 460:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return __a.allocate(__n); }
 461:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 462:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 463:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 464:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 465:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 466:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __hint Aid to locality.
 467:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 468:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *          of type @c value_type
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 85


 469:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 470:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 471:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 472:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 473:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 474:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       {
 475:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 476:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	return __a.allocate(__n, __hint);
 477:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 478:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	return __a.allocate(__n);
 479:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 480:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       }
 481:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 482:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 483:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Deallocate memory.
 484:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 485:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 486:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 487:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 488:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 489:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 490:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 491:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 492:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 493:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 494:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 495:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 496:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 497:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 498:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *	       an object of type `_Up`.
 499:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __args Constructor arguments.
 500:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 501:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 502:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 503:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 504:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 505:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Up, typename... _Args>
 506:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 507:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 582              		.loc 7 507 2 is_stmt 1 view .LVU147
 583              	.LBB402:
 584              	.LBI402:
 585              		.file 8 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\ext\\new_allocato
   1:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
   3:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** //
   5:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // terms of the GNU General Public License as published by the
   8:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // any later version.
  10:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  11:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // GNU General Public License for more details.
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 86


  15:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  16:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  20:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  25:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** /** @file ext/new_allocator.h
  26:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****  */
  28:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  29:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  32:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #include <bits/c++config.h>
  33:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #include <new>
  34:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #include <bits/functexcept.h>
  35:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #include <bits/move.h>
  36:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus >= 201103L
  37:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #include <type_traits>
  38:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
  39:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  40:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** {
  42:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  44:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****   /**
  45:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  46:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *  @ingroup allocators
  47:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *
  48:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  49:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *    - all allocation calls operator new
  50:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *    - all deallocation calls operator delete
  51:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *
  52:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  53:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    */
  54:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****   template<typename _Tp>
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****     class new_allocator
  56:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****     {
  57:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****     public:
  58:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef _Tp        value_type;
  59:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef std::size_t     size_type;
  60:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef std::ptrdiff_t  difference_type;
  61:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus <= 201703L
  62:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef _Tp*       pointer;
  63:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef const _Tp* const_pointer;
  64:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef _Tp&       reference;
  65:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef const _Tp& const_reference;
  66:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  67:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       template<typename _Tp1>
  68:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	struct rebind
  69:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  70:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
  71:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 87


  72:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus >= 201103L
  73:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  74:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  75:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  76:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
  77:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  78:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  79:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  81:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  82:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  83:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  84:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       template<typename _Tp1>
  85:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  86:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  87:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  88:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus <= 201703L
  89:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  90:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  91:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       pointer
  92:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       { return std::__addressof(__x); }
  94:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  95:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       const_pointer
  96:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       { return std::__addressof(__x); }
  98:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
  99:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 100:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 101:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       // about what the return value is when __n == 0.
 102:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       _GLIBCXX_NODISCARD _Tp*
 103:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 104:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       {
 105:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	if (__n > this->_M_max_size())
 106:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	  std::__throw_bad_alloc();
 107:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 108:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cpp_aligned_new
 109:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 110:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	  {
 111:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 112:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 113:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	  }
 114:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 116:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       }
 117:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 118:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       // __p is not permitted to be a null pointer.
 119:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       void
 120:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       deallocate(_Tp* __p, size_type __t)
 121:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       {
 122:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cpp_aligned_new
 123:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 124:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	  {
 125:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	    ::operator delete(__p,
 126:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** # if __cpp_sized_deallocation
 127:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 			      __t * sizeof(_Tp),
 128:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** # endif
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 88


 129:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 			      std::align_val_t(alignof(_Tp)));
 130:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	    return;
 131:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	  }
 132:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
 133:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	::operator delete(__p
 134:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cpp_sized_deallocation
 135:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 			  , __t * sizeof(_Tp)
 136:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
 137:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 			 );
 138:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       }
 139:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 140:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus <= 201703L
 141:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       size_type
 142:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 143:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       { return _M_max_size(); }
 144:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 145:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus >= 201103L
 146:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       template<typename _Up, typename... _Args>
 147:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	void
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	construct(_Up* __p, _Args&&... __args)
 586              		.loc 8 148 2 view .LVU148
 587              		.loc 8 148 2 is_stmt 0 view .LVU149
 588              	.LBE402:
 589              	.LBE401:
 590              		.file 9 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\new"
   1:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // The -*- C++ -*- dynamic memory management header.
   2:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
   3:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // Copyright (C) 1994-2020 Free Software Foundation, Inc.
   4:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
   5:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // This file is part of GCC.
   6:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** //
   7:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // GCC is free software; you can redistribute it and/or modify
   8:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // it under the terms of the GNU General Public License as published by
   9:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // the Free Software Foundation; either version 3, or (at your option)
  10:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // any later version.
  11:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // 
  12:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // GCC is distributed in the hope that it will be useful,
  13:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // GNU General Public License for more details.
  16:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // 
  17:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // Under Section 7 of GPL version 3, you are granted additional
  18:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // permissions described in the GCC Runtime Library Exception, version
  19:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // 3.1, as published by the Free Software Foundation.
  20:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  21:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // You should have received a copy of the GNU General Public License and
  22:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // <http://www.gnu.org/licenses/>.
  25:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  26:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** /** @file new
  27:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****  *  This is a Standard C++ Library header.
  28:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****  *
  29:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****  *  handling memory allocation errors; see
  31:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****  *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/dynamic_memory.html
  32:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****  *  for more.
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 89


  33:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****  */
  34:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  35:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #ifndef _NEW
  36:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #define _NEW
  37:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  38:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #pragma GCC system_header
  39:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  40:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #include <bits/c++config.h>
  41:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #include <exception>
  42:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  43:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #pragma GCC visibility push(default)
  44:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  45:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** extern "C++" {
  46:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  47:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** namespace std 
  48:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** {
  49:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   /**
  50:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****    *  @brief  Exception possibly thrown by @c new.
  51:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****    *  @ingroup exceptions
  52:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****    *
  53:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  54:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****    *  errors from the throwing forms of @c new.  */
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   class bad_alloc : public exception 
  56:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   {
  57:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   public:
  58:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****     bad_alloc() throw() { }
  59:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  60:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #if __cplusplus >= 201103L
  61:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****     bad_alloc(const bad_alloc&) = default;
  62:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****     bad_alloc& operator=(const bad_alloc&) = default;
  63:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #endif
  64:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  65:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****     // This declaration is not useless:
  66:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  67:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****     virtual ~bad_alloc() throw();
  68:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  69:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****     // See comment in eh_exception.cc.
  70:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****     virtual const char* what() const throw();
  71:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   };
  72:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  73:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #if __cplusplus >= 201103L
  74:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   class bad_array_new_length : public bad_alloc
  75:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   {
  76:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   public:
  77:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****     bad_array_new_length() throw() { }
  78:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  79:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****     // This declaration is not useless:
  80:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  81:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****     virtual ~bad_array_new_length() throw();
  82:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  83:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****     // See comment in eh_exception.cc.
  84:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****     virtual const char* what() const throw();
  85:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   };
  86:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #endif
  87:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  88:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #if __cpp_aligned_new
  89:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   enum class align_val_t: size_t {};
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 90


  90:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #endif
  91:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  92:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   struct nothrow_t
  93:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   {
  94:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #if __cplusplus >= 201103L
  95:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****     explicit nothrow_t() = default;
  96:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #endif
  97:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   };
  98:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
  99:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   extern const nothrow_t nothrow;
 100:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
 101:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   /** If you write your own error handler to be called by @c new, it must
 102:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****    *  be of this type.  */
 103:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   typedef void (*new_handler)();
 104:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
 105:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   /// Takes a replacement handler as the argument, returns the
 106:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   /// previous handler.
 107:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   new_handler set_new_handler(new_handler) throw();
 108:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
 109:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #if __cplusplus >= 201103L
 110:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   /// Return the current new handler.
 111:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   new_handler get_new_handler() noexcept;
 112:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #endif
 113:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** } // namespace std
 114:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** //@{
 116:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** /** These are replaceable signatures:
 117:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 118:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****  *  - normal array new and delete (same)
 119:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 120:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****  *    @c NULL on error)
 121:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****  *  - @c nothrow array new and delete (same)
 122:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****  *
 123:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****  *  Placement new and delete signatures (take a memory address argument,
 124:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****  *  does nothing) may not be replaced by a user's program.
 125:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** */
 126:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 127:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 128:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 129:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 130:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 131:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 132:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 133:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 134:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #if __cpp_sized_deallocation
 135:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 136:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 137:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 138:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 139:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #endif
 140:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 141:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__, __malloc__));
 142:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 143:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__, __malloc__));
 144:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 145:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 146:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 91


 147:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #if __cpp_aligned_new
 149:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 150:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 151:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 152:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 153:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** void operator delete(void*, std::align_val_t)
 154:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 155:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 156:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 157:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 158:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 159:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 160:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 161:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** void operator delete[](void*, std::align_val_t)
 162:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 163:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 164:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 165:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #if __cpp_sized_deallocation
 166:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** void operator delete(void*, std::size_t, std::align_val_t)
 167:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 168:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** void operator delete[](void*, std::size_t, std::align_val_t)
 169:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 170:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #endif // __cpp_sized_deallocation
 171:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** #endif // __cpp_aligned_new
 172:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** 
 173:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** // Default placement versions of operator new.
 174:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 175:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\new **** { return __p; }
 591              		.loc 9 175 3 is_stmt 1 view .LVU150
 592              	.LBB405:
 593              	.LBB404:
 594              	.LBB403:
 149:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 150:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 595              		.loc 8 150 4 is_stmt 0 view .LVU151
 596 0040 0BEB0500 		add	r0, fp, r5
 597              	.LVL34:
 598              		.loc 8 150 4 view .LVU152
 599 0044 5222     		movs	r2, #82
 600 0046 FFF7FEFF 		bl	memcpy
 601              	.LVL35:
 602              		.loc 8 150 4 view .LVU153
 603              	.LBE403:
 604              	.LBE404:
 605              	.LBE405:
 606              	.LBB406:
 607              	.LBI406:
 465:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 608              		.loc 2 465 7 is_stmt 1 view .LVU154
 609              	.LBB407:
 610              	.LBB408:
 611              	.LBB409:
 612              	.LBB410:
 613              	.LBB411:
 614              		.file 10 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\stl_uninit
   1:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 92


   2:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
   3:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** //
   5:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // any later version.
  10:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  11:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // GNU General Public License for more details.
  15:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  16:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  20:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  25:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** /*
  26:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  *
  27:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * Copyright (c) 1994
  28:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * Hewlett-Packard Company
  29:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  *
  30:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  *
  38:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  *
  39:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  *
  42:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  */
  50:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  51:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  */
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  56:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 93


  59:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus > 201402L
  60:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #include <bits/stl_pair.h>
  61:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #endif
  62:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  63:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus >= 201103L
  64:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #include <type_traits>
  65:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #endif
  66:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  67:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #include <ext/alloc_traits.h>
  68:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  69:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** {
  71:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  73:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /** @addtogroup memory
  74:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @{
  75:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    */
  76:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  77:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
  78:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  79:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  80:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_copy
  81:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
  82:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  83:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
  84:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  85:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		      _ForwardIterator __result)
  86:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         {
  87:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  88:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __try
  89:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
  90:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      for (; __first != __last; ++__first, (void)++__cur)
  91:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  92:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      return __cur;
  93:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
  94:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
  95:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
  96:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  97:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
  98:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
  99:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 100:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 101:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 102:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<>
 103:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_copy<true>
 104:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 105:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
 106:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
 107:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
 108:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		      _ForwardIterator __result)
 109:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
 110:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 111:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 112:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @endcond
 113:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 114:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 94


 116:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 117:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __last   An input iterator.
 118:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
 119:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 120:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *
 121:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 122:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 123:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 124:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 125:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 126:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		       _ForwardIterator __result)
 127:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 128:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 129:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType1;
 130:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 131:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType2;
 132:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus < 201103L
 133:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = true;
 134:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #else
 135:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::copy
 136:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 137:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
 138:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  "result type must be constructible from value type of input range");
 139:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 140:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _RefType1;
 141:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
 142:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::copy
 143:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::copy:
 144:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 145:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #endif
 146:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 147:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return std::__uninitialized_copy<__is_trivial(_ValueType1)
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				       && __is_trivial(_ValueType2)
 149:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				       && __assignable>::
 150:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 151:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 152:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 153:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 154:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 155:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 156:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_fill
 157:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 158:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 159:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static void
 160:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 161:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		      const _Tp& __x)
 162:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         {
 163:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 164:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __try
 165:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 166:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 167:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 168:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 169:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 170:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 171:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 172:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 95


 173:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 174:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 175:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 176:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 177:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<>
 178:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_fill<true>
 179:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 180:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 181:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static void
 182:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 183:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		      const _Tp& __x)
 184:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 185:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 186:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 187:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @endcond
 188:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 190:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 191:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 192:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __last   An input iterator.
 193:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __x      The source value.
 194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return   Nothing.
 195:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *
 196:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 197:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 199:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 200:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 201:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		       const _Tp& __x)
 202:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 203:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 204:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 205:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus < 201103L
 206:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = true;
 207:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #else
 208:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 209:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 210:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 211:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  "result type must be constructible from input type");
 212:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 213:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 214:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 215:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 216:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #endif
 217:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 218:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 219:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 220:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 221:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 222:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 223:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 224:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 225:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_fill_n
 226:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 227:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 228:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
 229:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 96


 230:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			const _Tp& __x)
 231:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         {
 232:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 233:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __try
 234:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 235:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 236:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 237:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      return __cur;
 238:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 239:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 240:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 241:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 242:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 243:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 244:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 245:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 246:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 247:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<>
 248:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 249:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 250:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 251:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
 252:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 253:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			const _Tp& __x)
 254:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         { return std::fill_n(__first, __n, __x); }
 255:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 256:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 257:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @endcond
 258:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 259:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 260:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    // DR 1339. uninitialized_fill_n should return the end of its range
 261:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 262:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 263:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 264:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 265:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __x      The source value.
 266:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return   Nothing.
 267:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *
 268:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 269:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 270:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 271:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 272:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 273:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 274:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 275:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 276:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus < 201103L
 277:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = true;
 278:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #else
 279:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 280:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 281:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 282:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  "result type must be constructible from input type");
 283:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 284:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 285:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 286:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 97


 287:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #endif
 288:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 289:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 290:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 291:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 292:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 293:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 294:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 295:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 296:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 297:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 298:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  any of the POD optimizations.
 299:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 300:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 301:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 302:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     _ForwardIterator
 303:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 304:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 305:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 306:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 307:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 308:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 309:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 310:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  for (; __first != __last; ++__first, (void)++__cur)
 311:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 312:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return __cur;
 313:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 314:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 315:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 316:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 317:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 318:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 319:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 320:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 321:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 322:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 323:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 324:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 325:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 326:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 327:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 328:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 329:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 330:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 331:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 332:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 333:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 334:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 335:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 					 __result, __alloc);
 336:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 337:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 338:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 339:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 340:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 341:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 342:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				       _InputIterator __last,
 343:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				       _ForwardIterator __result,
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 98


 344:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				       _Allocator& __alloc)
 345:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 346:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return std::__uninitialized_copy_a
 347:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 348:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 349:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 350:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 351:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Allocator>
 352:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     void
 353:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 354:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   const _Tp& __x, _Allocator& __alloc)
 355:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 356:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 357:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 358:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 359:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 360:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 361:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 362:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 363:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 364:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 365:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 366:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 367:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 368:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 369:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 370:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Tp2>
 371:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 372:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 373:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   const _Tp& __x, allocator<_Tp2>&)
 374:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     { std::uninitialized_fill(__first, __last, __x); }
 375:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 376:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 377:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 378:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     _ForwardIterator
 379:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 380:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			     const _Tp& __x, _Allocator& __alloc)
 381:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 382:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 383:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 384:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 385:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 386:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 387:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 388:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return __cur;
 389:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 390:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 391:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 392:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 393:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 394:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 395:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 396:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 397:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 398:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _Tp2>
 399:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 400:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 99


 401:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			     const _Tp& __x, allocator<_Tp2>&)
 402:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     { return std::uninitialized_fill_n(__first, __n, __x); }
 403:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 404:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 405:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,
 406:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_fill_move, __uninitialized_move_fill.
 407:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // All of these algorithms take a user-supplied allocator, which is used
 408:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // for construction and destruction.
 409:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 410:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_copy_move
 411:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Copies [first1, last1) into [result, result + (last1 - first1)), and
 412:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  move [first2, last2) into
 413:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 414:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 415:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 416:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 417:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_move(_InputIterator1 __first1,
 418:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _InputIterator1 __last1,
 419:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _InputIterator2 __first2,
 420:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _InputIterator2 __last2,
 421:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __result,
 422:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
 423:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 424:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 425:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 							   __result,
 426:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 							   __alloc);
 427:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 428:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 429:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 430:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 431:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 432:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 433:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 434:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 435:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 436:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 437:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 438:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_move_copy
 439:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Moves [first1, last1) into [result, result + (last1 - first1)), and
 440:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  copies [first2, last2) into
 441:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 442:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 443:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 444:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 445:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_move_copy(_InputIterator1 __first1,
 446:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _InputIterator1 __last1,
 447:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _InputIterator2 __first2,
 448:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _InputIterator2 __last2,
 449:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __result,
 450:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
 451:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 452:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 453:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 							   __result,
 454:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 							   __alloc);
 455:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 456:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 457:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 100


 458:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 459:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 460:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 461:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 462:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 463:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 464:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 465:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   
 466:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_fill_move
 467:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Fills [result, mid) with x, and moves [first, last) into
 468:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  [mid, mid + (last - first)).
 469:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
 470:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 471:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 472:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
 473:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      const _Tp& __x, _InputIterator __first,
 474:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _InputIterator __last, _Allocator& __alloc)
 475:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 476:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
 477:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 478:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 479:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 480:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 481:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 482:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 483:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 484:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 485:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 486:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 487:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 488:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_move_fill
 489:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Moves [first1, last1) into [first2, first2 + (last1 - first1)), and
 490:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  fills [first2 + (last1 - first1), last2) with x.
 491:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
 492:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 493:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 494:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
 495:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __first2,
 496:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __last2, const _Tp& __x,
 497:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
 498:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 499:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
 500:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 							    __first2,
 501:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 							    __alloc);
 502:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 503:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 504:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 505:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 506:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 507:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 508:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first2, __mid2, __alloc);
 509:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 510:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 511:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 512:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 513:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @endcond
 514:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 101


 515:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus >= 201103L
 516:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 517:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 518:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Extensions: __uninitialized_default, __uninitialized_default_n,
 519:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_a, __uninitialized_default_n_a.
 520:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 521:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 522:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_1
 523:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 524:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 525:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static void
 526:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 527:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         {
 528:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 529:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __try
 530:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 531:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 532:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 533:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 534:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 535:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 536:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 537:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 538:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 539:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 540:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 541:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 542:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<>
 543:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_1<true>
 544:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 545:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 546:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static void
 547:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 548:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         {
 549:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  typedef typename iterator_traits<_ForwardIterator>::value_type
 550:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    _ValueType;
 551:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 552:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::fill(__first, __last, _ValueType());
 553:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 554:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 555:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 556:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 557:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_n_1
 558:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 559:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 560:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
 561:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 562:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         {
 563:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 564:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __try
 565:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 566:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 567:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 568:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      return __cur;
 569:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 570:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 571:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 102


 572:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 573:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 574:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 575:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 576:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 577:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 578:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<>
 579:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_n_1<true>
 580:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 581:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 582:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
 583:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 584:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         {
 585:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  typedef typename iterator_traits<_ForwardIterator>::value_type
 586:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    _ValueType;
 587:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 588:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return std::fill_n(__first, __n, _ValueType());
 589:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 590:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 591:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 592:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default
 593:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default
 594:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // constructed value_types(s).
 595:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator>
 596:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 597:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default(_ForwardIterator __first,
 598:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			    _ForwardIterator __last)
 599:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 600:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 601:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 602:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // trivial types can have deleted assignment
 603:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 604:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 605:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       std::__uninitialized_default_1<__is_trivial(_ValueType)
 606:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				     && __assignable>::
 607:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_default(__first, __last);
 608:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 609:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 610:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_n
 611:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Fills [first, first + n) with n default constructed value_type(s).
 612:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size>
 613:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 614:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 615:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 616:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 617:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 618:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // trivial types can have deleted assignment
 619:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 620:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 621:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __uninitialized_default_n_1<__is_trivial(_ValueType)
 622:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				       && __assignable>::
 623:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_default_n(__first, __n);
 624:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 625:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 626:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 627:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_a
 628:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 103


 629:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // constructed value_types(s), constructed with the allocator alloc.
 630:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Allocator>
 631:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     void
 632:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 633:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __last,
 634:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
 635:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 636:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 637:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 638:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 639:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 640:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 641:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 642:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 643:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 644:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 645:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 646:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 647:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 648:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 649:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 650:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 651:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 652:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 653:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __last,
 654:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      allocator<_Tp>&)
 655:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     { std::__uninitialized_default(__first, __last); }
 656:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 657:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 658:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_n_a
 659:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Fills [first, first + n) with n default constructed value_types(s),
 660:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // constructed with the allocator alloc.
 661:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Allocator>
 662:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     _ForwardIterator
 663:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 664:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				_Allocator& __alloc)
 665:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 666:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 667:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 668:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 669:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 670:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 671:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 672:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return __cur;
 673:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 674:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 675:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 676:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 677:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 678:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 679:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 680:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 681:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 682:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 683:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 684:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				allocator<_Tp>&)
 685:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     { return std::__uninitialized_default_n(__first, __n); }
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 104


 686:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 687:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 688:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_1
 689:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 690:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 691:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	static void
 692:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_default_novalue(_ForwardIterator __first,
 693:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				 _ForwardIterator __last)
 694:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 695:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 696:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __try
 697:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 698:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 699:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		std::_Construct_novalue(std::__addressof(*__cur));
 700:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 701:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 702:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 703:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 704:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 705:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 706:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 707:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 708:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 709:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<>
 710:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_1<true>
 711:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 712:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 713:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static void
 714:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_default_novalue(_ForwardIterator __first,
 715:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				 _ForwardIterator __last)
 716:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 717:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 718:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 719:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 720:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 721:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_n_1
 722:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 723:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 724:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	static _ForwardIterator
 725:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 726:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 727:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 728:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __try
 729:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 730:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 731:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		std::_Construct_novalue(std::__addressof(*__cur));
 732:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      return __cur;
 733:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 734:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 735:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 736:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 737:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 738:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 739:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 740:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 741:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 742:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<>
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 105


 743:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_n_1<true>
 744:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 745:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 746:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	static _ForwardIterator
 747:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 748:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{ return std::next(__first, __n); }
 749:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 750:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 751:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_novalue
 752:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default-initialized
 753:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // value_types(s).
 754:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator>
 755:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 756:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_novalue(_ForwardIterator __first,
 757:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				    _ForwardIterator __last)
 758:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 759:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 760:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 761:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 762:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       std::__uninitialized_default_novalue_1<
 763:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	is_trivially_default_constructible<_ValueType>::value>::
 764:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_default_novalue(__first, __last);
 765:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 766:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 767:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_n
 768:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Fills [first, first + n) with n default-initialized value_type(s).
 769:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size>
 770:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 771:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
 772:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 773:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 774:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 775:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 776:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __uninitialized_default_novalue_n_1<
 777:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	is_trivially_default_constructible<_ValueType>::value>::
 778:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_default_novalue_n(__first, __n);
 779:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 780:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 781:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size,
 782:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
 783:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     _ForwardIterator
 784:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_n(_InputIterator __first, _Size __n,
 785:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, input_iterator_tag)
 786:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 787:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 788:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 789:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 790:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__first, ++__cur)
 791:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 792:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return __cur;
 793:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 794:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 795:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 796:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __cur);
 797:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 798:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 799:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 106


 800:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 801:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _RandomAccessIterator, typename _Size,
 802:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
 803:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 804:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
 805:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result,
 806:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   random_access_iterator_tag)
 807:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __first + __n, __result); }
 808:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 809:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size,
 810:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
 811:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     pair<_InputIterator, _ForwardIterator>
 812:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
 813:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, input_iterator_tag)
 814:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 815:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 816:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 817:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 818:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__first, ++__cur)
 819:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 820:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return {__first, __cur};
 821:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 822:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 823:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 824:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __cur);
 825:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 826:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 827:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 828:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 829:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _RandomAccessIterator, typename _Size,
 830:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
 831:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline pair<_RandomAccessIterator, _ForwardIterator>
 832:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,
 833:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result,
 834:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   random_access_iterator_tag)
 835:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 836:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       auto __second_res = uninitialized_copy(__first, __first + __n, __result);
 837:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       auto __first_res = std::next(__first, __n);
 838:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return {__first_res, __second_res};
 839:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 840:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 841:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @endcond
 842:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 843:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 844:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Copies the range [first,first+n) into result.
 845:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 846:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __n      The number of elements to copy.
 847:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
 848:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return  __result + __n
 849:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *
 850:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  Like copy_n(), but does not require an initialized output range.
 851:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 852:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size, typename _ForwardIterator>
 853:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 854:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_copy_n(_InputIterator __first, _Size __n,
 855:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			 _ForwardIterator __result)
 856:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     { return std::__uninitialized_copy_n(__first, __n, __result,
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 107


 857:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 					 std::__iterator_category(__first)); }
 858:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 859:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 860:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size, typename _ForwardIterator>
 861:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline pair<_InputIterator, _ForwardIterator>
 862:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
 863:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __result)
 864:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 865:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return
 866:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	std::__uninitialized_copy_n_pair(__first, __n, __result,
 867:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 					 std::__iterator_category(__first));
 868:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 869:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @endcond
 870:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #endif
 871:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 872:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus >= 201703L
 873:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** # define __cpp_lib_raw_memory_algorithms 201606L
 874:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 875:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 876:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Default-initializes objects in the range [first,last).
 877:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 878:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __last   A forward iterator.
 879:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 880:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _ForwardIterator>
 881:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 882:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_default_construct(_ForwardIterator __first,
 883:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				    _ForwardIterator __last)
 884:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 885:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __uninitialized_default_novalue(__first, __last);
 886:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 887:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 888:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 889:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Default-initializes objects in the range [first,first+count).
 890:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 891:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __count  The number of objects to construct.
 892:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return   __first + __count
 893:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 894:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _ForwardIterator, typename _Size>
 895:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 896:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)
 897:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 898:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __uninitialized_default_novalue_n(__first, __count);
 899:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 900:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 901:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 902:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Value-initializes objects in the range [first,last).
 903:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 904:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __last   A forward iterator.
 905:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 906:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _ForwardIterator>
 907:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 908:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_value_construct(_ForwardIterator __first,
 909:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				  _ForwardIterator __last)
 910:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 911:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __uninitialized_default(__first, __last);
 912:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 913:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 108


 914:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 915:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Value-initializes objects in the range [first,first+count).
 916:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 917:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __count  The number of objects to construct.
 918:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return   __result + __count
 919:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 920:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _ForwardIterator, typename _Size>
 921:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 922:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)
 923:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 924:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __uninitialized_default_n(__first, __count);
 925:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 926:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 927:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 928:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Move-construct from the range [first,last) into result.
 929:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 930:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __last   An input iterator.
 931:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
 932:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 933:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 934:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator>
 935:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 936:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_move(_InputIterator __first, _InputIterator __last,
 937:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		       _ForwardIterator __result)
 938:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 939:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return std::uninitialized_copy
 940:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 941:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_ITERATOR(__last), __result);
 942:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 943:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 944:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 945:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Move-construct from the range [first,first+count) into result.
 946:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 947:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __count  The number of objects to initialize.
 948:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
 949:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return  __result + __count
 950:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 951:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _InputIterator, typename _Size, typename _ForwardIterator>
 952:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline pair<_InputIterator, _ForwardIterator>
 953:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_move_n(_InputIterator __first, _Size __count,
 954:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			 _ForwardIterator __result)
 955:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 956:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       auto __res = std::__uninitialized_copy_n_pair
 957:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 958:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	 __count, __result);
 959:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return {__res.first.base(), __res.second};
 960:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 961:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #endif // C++17
 962:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 963:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus >= 201103L
 964:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 965:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 966:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _Tp, typename _Up, typename _Allocator>
 967:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 968:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 969:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			_Allocator& __alloc)
 970:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 109


 971:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			 __dest, std::move(*__orig)))
 972:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	     && noexcept(std::allocator_traits<_Allocator>::destroy(
 973:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			    __alloc, std::__addressof(*__orig))))
 974:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 975:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef std::allocator_traits<_Allocator> __traits;
 976:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __traits::construct(__alloc, __dest, std::move(*__orig));
 977:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __traits::destroy(__alloc, std::__addressof(*__orig));
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 979:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 980:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // This class may be specialized for specific types.
 981:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Also known as is_trivially_relocatable.
 982:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _Tp, typename = void>
 983:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __is_bitwise_relocatable
 984:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     : is_trivial<_Tp> { };
 985:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 986:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _Tp, typename _Up>
 987:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
 988:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __relocate_a_1(_Tp* __first, _Tp* __last,
 989:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		   _Tp* __result, allocator<_Up>&) noexcept
 990:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 991:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       ptrdiff_t __count = __last - __first;
 992:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       if (__count > 0)
 993:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 994:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __result + __count;
 995:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 996:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 997:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator,
 998:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    typename _Allocator>
 999:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
1000:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __relocate_a_1(_InputIterator __first, _InputIterator __last,
1001:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		   _ForwardIterator __result, _Allocator& __alloc)
1002:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
1003:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 					       std::addressof(*__first),
1004:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 					       __alloc)))
1005:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
1006:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1007:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType;
1008:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
1009:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType2;
1010:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       static_assert(std::is_same<_ValueType, _ValueType2>::value,
1011:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  "relocation is only possible for values of the same type");
1012:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
1013:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       for (; __first != __last; ++__first, (void)++__cur)
 615              		.loc 10 1013 22 view .LVU155
 616 004a 5645     		cmp	r6, r10
 617 004c 1BD0     		beq	.L55
 618 004e 0BF15205 		add	r5, fp, #82
 619 0052 5446     		mov	r4, r10
 620              	.LVL36:
 621              	.L56:
 622              	.LBB412:
 623              	.LBI412:
 968:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			_Allocator& __alloc)
 624              		.loc 10 968 5 view .LVU156
 625              	.LBB413:
 626              	.LBB414:
 627              	.LBI414:
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 110


 628              		.loc 7 507 2 view .LVU157
 629              	.LBB415:
 630              	.LBI415:
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 631              		.loc 8 148 2 view .LVU158
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 632              		.loc 8 148 2 is_stmt 0 view .LVU159
 633              	.LBE415:
 634              	.LBE414:
 635              	.LBE413:
 636              	.LBE412:
 637              	.LBE411:
 638              	.LBE410:
 639              	.LBE409:
 640              	.LBE408:
 641              	.LBE407:
 642              	.LBE406:
 643              		.loc 9 175 3 is_stmt 1 view .LVU160
 644              	.LBB436:
 645              	.LBB434:
 646              	.LBB432:
 647              	.LBB430:
 648              	.LBB428:
 649              	.LBB426:
 650              	.LBB424:
 651              	.LBB422:
 652              	.LBB420:
 653              	.LBB418:
 654              	.LBB416:
 655              		.loc 8 150 4 is_stmt 0 view .LVU161
 656 0054 4FF05208 		mov	r8, #82
 657 0058 2146     		mov	r1, r4
 658 005a A5F15200 		sub	r0, r5, #82
 659              	.LBE416:
 660              	.LBE418:
 661              	.LBE420:
 662              	.LBE422:
 663              	.LBE424:
 664              		.loc 10 1013 7 view .LVU162
 665 005e 4444     		add	r4, r4, r8
 666              	.LVL37:
 667              	.LBB425:
 668              	.LBB423:
 669              	.LBB421:
 670              	.LBB419:
 671              	.LBB417:
 672              		.loc 8 150 4 view .LVU163
 673 0060 4246     		mov	r2, r8
 674 0062 FFF7FEFF 		bl	memcpy
 675              	.LVL38:
 676              		.loc 8 150 4 view .LVU164
 677              	.LBE417:
 678              	.LBE419:
 679              	.LBE421:
 680              	.LBE423:
 681              	.LBE425:
 682              		.loc 10 1013 7 is_stmt 1 view .LVU165
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 111


 683              		.loc 10 1013 22 view .LVU166
 684 0066 4544     		add	r5, r5, r8
 685 0068 B442     		cmp	r4, r6
 686 006a F3D1     		bne	.L56
 687              	.LBE426:
 688              	.LBE428:
 689              	.LBE430:
 690              	.LBE432:
 691              	.LBE434:
 692              	.LBE436:
 427:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _M_realloc_insert(iterator __position, _Args&&... __args)
 428:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 429:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 430:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     void
 431:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 432:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     _M_realloc_insert(iterator __position, const _Tp& __x)
 433:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 434:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
 435:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       const size_type __len =
 436:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 437:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       pointer __old_start = this->_M_impl._M_start;
 438:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       pointer __old_finish = this->_M_impl._M_finish;
 439:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       const size_type __elems_before = __position - begin();
 440:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       pointer __new_start(this->_M_allocate(__len));
 441:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       pointer __new_finish(__new_start);
 442:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       __try
 443:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	{
 444:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  // The order of the three operations is dictated by the C++11
 445:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  // case, where the moves could alter a new element belonging
 446:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  // to the existing vector.  This is an issue only for callers
 447:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  // taking the element by lvalue ref (see last bullet of C++11
 448:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  // [res.on.arguments]).
 449:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl,
 450:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				   __new_start + __elems_before,
 451:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 452:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				   std::forward<_Args>(__args)...);
 453:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 454:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				   __x);
 455:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 456:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  __new_finish = pointer();
 457:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 458:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 459:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 460:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
 461:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      __new_finish = _S_relocate(__old_start, __position.base(),
 462:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					 __new_start, _M_get_Tp_allocator());
 463:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 464:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      ++__new_finish;
 693              		.loc 5 464 8 is_stmt 0 view .LVU167
 694 006c A6F15204 		sub	r4, r6, #82
 695              	.LVL39:
 696              		.loc 5 464 8 view .LVU168
 697 0070 244B     		ldr	r3, .L69+8
 698 0072 A4EB0A04 		sub	r4, r4, r10
 699 0076 6408     		lsrs	r4, r4, #1
 700 0078 03FB04F4 		mul	r4, r3, r4
 701 007c 24F00044 		bic	r4, r4, #-2147483648
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 112


 702 0080 0234     		adds	r4, r4, #2
 703 0082 08FB04B4 		mla	r4, r8, r4, fp
 704              	.L55:
 705              	.LVL40:
 706              	.LBB437:
 707              	.LBI437:
 465:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 708              		.loc 2 465 7 is_stmt 1 view .LVU169
 709              	.LBB438:
 710              	.LBB439:
 711              	.LBB440:
 712              	.LBB441:
 713              	.LBB442:
 714              		.loc 10 1013 22 view .LVU170
 715 0086 BE42     		cmp	r6, r7
 716 0088 0FD0     		beq	.L57
 717              	.LBB443:
 718              	.LBB444:
 719              	.LBB445:
 720              	.LBB446:
 721              	.LBB447:
 722              		.loc 8 150 4 is_stmt 0 view .LVU171
 723 008a BA1B     		subs	r2, r7, r6
 724 008c 1D4B     		ldr	r3, .L69+8
 725 008e 2046     		mov	r0, r4
 726 0090 3146     		mov	r1, r6
 727 0092 523A     		subs	r2, r2, #82
 728 0094 5208     		lsrs	r2, r2, #1
 729 0096 03FB02F2 		mul	r2, r3, r2
 730 009a 5223     		movs	r3, #82
 731 009c 22F00042 		bic	r2, r2, #-2147483648
 732 00a0 02FB0332 		mla	r2, r2, r3, r3
 733              	.LBE447:
 734              	.LBE446:
 735              	.LBE445:
 736              	.LBE444:
 737              	.LBE443:
 738              		.loc 10 1013 44 view .LVU172
 739 00a4 1444     		add	r4, r4, r2
 740              	.LBB452:
 741              	.LBB451:
 742              	.LBB450:
 743              	.LBB449:
 744              	.LBB448:
 745              		.loc 8 150 4 view .LVU173
 746 00a6 FFF7FEFF 		bl	memcpy
 747              	.LVL41:
 748              	.L57:
 749              		.loc 8 150 4 view .LVU174
 750              	.LBE448:
 751              	.LBE449:
 752              	.LBE450:
 753              	.LBE451:
 754              	.LBE452:
 755              	.LBE442:
 756              	.LBE441:
 757              	.LBE440:
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 113


 758              	.LBE439:
 759              	.LBE438:
 760              	.LBE437:
 761              	.LBB453:
 762              	.LBI453:
 350:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 763              		.loc 2 350 7 is_stmt 1 view .LVU175
 764              	.LBB454:
 353:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 765              		.loc 2 353 2 is_stmt 0 view .LVU176
 766 00aa BAF1000F 		cmp	r10, #0
 767 00ae 06D0     		beq	.L58
 768              	.LVL42:
 769              	.LBB455:
 770              	.LBI455:
 491:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 771              		.loc 7 491 7 is_stmt 1 view .LVU177
 772              	.LBB456:
 773              	.LBB457:
 774              	.LBI457:
 120:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       {
 775              		.loc 8 120 7 view .LVU178
 776              	.LBE457:
 777              	.LBE456:
 778              	.LBE455:
 779              	.LBE454:
 780              	.LBE453:
 465:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 466:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      __new_finish = _S_relocate(__position.base(), __old_finish,
 467:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					 __new_finish, _M_get_Tp_allocator());
 468:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 469:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  else
 470:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 471:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
 472:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      __new_finish
 473:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 474:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		(__old_start, __position.base(),
 475:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 476:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 477:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      ++__new_finish;
 478:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 479:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      __new_finish
 480:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 481:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		(__position.base(), __old_finish,
 482:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 483:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 484:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	}
 485:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       __catch(...)
 486:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	{
 487:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  if (!__new_finish)
 488:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _Alloc_traits::destroy(this->_M_impl,
 489:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				   __new_start + __elems_before);
 490:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  else
 491:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 492:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_deallocate(__new_start, __len);
 493:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  __throw_exception_again;
 494:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	}
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 114


 495:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 496:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 497:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 498:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 499:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_REINIT;
 500:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _M_deallocate(__old_start,
 501:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		    this->_M_impl._M_end_of_storage - __old_start);
 781              		.loc 5 501 39 is_stmt 0 view .LVU179
 782 00b0 D9F80810 		ldr	r1, [r9, #8]
 783              	.LBB463:
 784              	.LBB462:
 785              	.LBB461:
 786              	.LBB460:
 787              	.LBB459:
 788              	.LBB458:
 133:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cpp_sized_deallocation
 789              		.loc 8 133 19 view .LVU180
 790 00b4 5046     		mov	r0, r10
 791 00b6 A1EB0A01 		sub	r1, r1, r10
 792 00ba FFF7FEFF 		bl	_ZdlPvj
 793              	.LVL43:
 794              	.L58:
 133:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cpp_sized_deallocation
 795              		.loc 8 133 19 view .LVU181
 796              	.LBE458:
 797              	.LBE459:
 798              	.LBE460:
 799              	.LBE461:
 800              	.LBE462:
 801              	.LBE463:
 502:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       this->_M_impl._M_start = __new_start;
 503:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       this->_M_impl._M_finish = __new_finish;
 504:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       this->_M_impl._M_end_of_storage = __new_start + __len;
 802              		.loc 5 504 39 view .LVU182
 803 00be 009B     		ldr	r3, [sp]
 503:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       this->_M_impl._M_end_of_storage = __new_start + __len;
 804              		.loc 5 503 31 view .LVU183
 805 00c0 C9E900B4 		strd	fp, r4, [r9]
 806              		.loc 5 504 39 view .LVU184
 807 00c4 C9F80830 		str	r3, [r9, #8]
 505:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 808              		.loc 5 505 5 view .LVU185
 809 00c8 03B0     		add	sp, sp, #12
 810              		.cfi_remember_state
 811              		.cfi_def_cfa_offset 36
 812              		@ sp needed
 813 00ca BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 814              	.LVL44:
 815              	.L68:
 816              		.cfi_restore_state
 817              	.LBB464:
 818              	.LBB397:
 819              	.LBB389:
 820              	.LBB390:
 821              	.LBB391:
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       }
 822              		.loc 8 115 41 view .LVU186
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 115


 823 00ce A342     		cmp	r3, r4
 824 00d0 28BF     		it	cs
 825 00d2 2346     		movcs	r3, r4
 826              	.LVL45:
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       }
 827              		.loc 8 115 41 view .LVU187
 828 00d4 5224     		movs	r4, #82
 829 00d6 04FB03F4 		mul	r4, r4, r3
 830              	.LVL46:
 831              	.L53:
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       }
 832              		.loc 8 115 41 view .LVU188
 833 00da 2046     		mov	r0, r4
 834              	.LVL47:
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       }
 835              		.loc 8 115 41 view .LVU189
 836 00dc 0191     		str	r1, [sp, #4]
 837              	.LBE391:
 838              	.LBE390:
 839              	.LBI389:
 459:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return __a.allocate(__n); }
 840              		.loc 7 459 7 is_stmt 1 view .LVU190
 841              	.LVL48:
 842              	.LBB394:
 843              	.LBI390:
 103:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       {
 844              		.loc 8 103 7 view .LVU191
 845              	.LBB392:
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       }
 846              		.loc 8 115 41 is_stmt 0 view .LVU192
 847 00de FFF7FEFF 		bl	_Znwj
 848              	.LVL49:
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       }
 849              		.loc 8 115 41 view .LVU193
 850              	.LBE392:
 851              	.LBE394:
 852              	.LBE389:
 853              	.LBE397:
 854              	.LBE464:
 504:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 855              		.loc 5 504 53 view .LVU194
 856 00e2 0319     		adds	r3, r0, r4
 857              	.LBB465:
 858              	.LBB398:
 859              	.LBB396:
 860              	.LBB395:
 861              	.LBB393:
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       }
 862              		.loc 8 115 41 view .LVU195
 863 00e4 8346     		mov	fp, r0
 864              	.LVL50:
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       }
 865              		.loc 8 115 41 view .LVU196
 866              	.LBE393:
 867              	.LBE395:
 868              	.LBE396:
 869              	.LBE398:
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 116


 870              	.LBE465:
 871              	.LBB466:
 872              	.LBB435:
 873              	.LBB433:
 874              	.LBB431:
 875              	.LBB429:
 876              	.LBB427:
 877              		.loc 10 1013 44 view .LVU197
 878 00e6 00F15204 		add	r4, r0, #82
 879              	.LBE427:
 880              	.LBE429:
 881              	.LBE431:
 882              	.LBE433:
 883              	.LBE435:
 884              	.LBE466:
 885              	.LBB467:
 886              	.LBB399:
 887 00ea 0199     		ldr	r1, [sp, #4]
 888              	.LBE399:
 889              	.LBE467:
 504:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 890              		.loc 5 504 53 view .LVU198
 891 00ec 0093     		str	r3, [sp]
 892              	.LBB468:
 893              	.LBB400:
 894 00ee A7E7     		b	.L59
 895              	.LVL51:
 896              	.L51:
 504:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 897              		.loc 5 504 53 view .LVU199
 898              	.LBE400:
 899              	.LBE468:
 900              	.LBB469:
 811:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 901              		.loc 2 811 7 is_stmt 1 view .LVU200
 902              	.LBB385:
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 903              		.loc 6 978 7 view .LVU201
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 904              		.loc 6 978 7 is_stmt 0 view .LVU202
 905              	.LBE385:
 906              	.LBE469:
 907              	.LBB470:
1202:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 908              		.loc 6 1202 5 is_stmt 1 view .LVU203
1202:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 909              		.loc 6 1202 5 is_stmt 0 view .LVU204
 910              	.LBE470:
 911              	.LBB471:
 343:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 912              		.loc 2 343 7 is_stmt 1 view .LVU205
 913              	.LBE471:
 914              	.LBB472:
 915              	.LBB382:
 916              		.loc 6 1205 27 is_stmt 0 view .LVU206
 917 00f0 054C     		ldr	r4, .L69+12
 918 00f2 F2E7     		b	.L53
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 117


 919              	.LVL52:
 920              	.L67:
 921              		.loc 6 1205 27 view .LVU207
 922              	.LBE382:
 923              	.LBE472:
 924              	.LBB473:
 925              	.LBB377:
1759:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __throw_length_error(__N(__s));
 926              		.loc 2 1759 24 view .LVU208
 927 00f4 0548     		ldr	r0, .L69+16
 928              	.LVL53:
 929              		.loc 2 1759 24 view .LVU209
 930 00f6 FFF7FEFF 		bl	_ZSt20__throw_length_errorPKc
 931              	.LVL54:
 932              	.L70:
 933              		.loc 2 1759 24 view .LVU210
 934 00fa 00BF     		.align	2
 935              	.L69:
 936 00fc 199C8FC1 		.word	-1047552999
 937 0100 189C8F01 		.word	26188824
 938 0104 199C8F41 		.word	1099930649
 939 0108 B0FFFF7F 		.word	2147483568
 940 010c 00000000 		.word	.LC10
 941              	.LBE377:
 942              	.LBE473:
 943              		.cfi_endproc
 944              	.LFE5010:
 946              		.section	.text._ZN9Sequencer14init_sequencesEv,"ax",%progbits
 947              		.align	1
 948              		.p2align 2,,3
 949              		.global	_ZN9Sequencer14init_sequencesEv
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu fpv5-d16
 955              	_ZN9Sequencer14init_sequencesEv:
 956              	.LVL55:
 957              	.LFB4307:
  64:Sequencer.cpp **** 
  65:Sequencer.cpp **** void Sequencer::init_sequences() {
 958              		.loc 1 65 34 is_stmt 1 view -0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 144
 961              		@ frame_needed = 0, uses_anonymous_args = 0
  66:Sequencer.cpp ****     Sequence seq{};
 962              		.loc 1 66 5 view .LVU212
  67:Sequencer.cpp ****     DrumSequence drum_seq{};
 963              		.loc 1 67 5 view .LVU213
  68:Sequencer.cpp **** 
  69:Sequencer.cpp ****     constexpr bool X = true;
 964              		.loc 1 69 5 view .LVU214
  70:Sequencer.cpp ****     constexpr bool _ = false;
 965              		.loc 1 70 5 view .LVU215
  71:Sequencer.cpp **** 
  72:Sequencer.cpp ****     // ROCK 1
  73:Sequencer.cpp ****     drum_seq.kick_steps  = {X, _, _, _, X, _, _, _, X, _, _, _, X, _, _, _};
 966              		.loc 1 73 5 view .LVU216
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 118


  65:Sequencer.cpp ****     Sequence seq{};
 967              		.loc 1 65 34 is_stmt 0 view .LVU217
 968 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 969              		.cfi_def_cfa_offset 36
 970              		.cfi_offset 4, -36
 971              		.cfi_offset 5, -32
 972              		.cfi_offset 6, -28
 973              		.cfi_offset 7, -24
 974              		.cfi_offset 8, -20
 975              		.cfi_offset 9, -16
 976              		.cfi_offset 10, -12
 977              		.cfi_offset 11, -8
 978              		.cfi_offset 14, -4
  74:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, X, _, _, _, _, _, X, _, _, _};
 979              		.loc 1 74 26 view .LVU218
 980 0004 4FF0000C 		mov	ip, #0
  65:Sequencer.cpp ****     Sequence seq{};
 981              		.loc 1 65 34 view .LVU219
 982 0008 A5B0     		sub	sp, sp, #148
 983              		.cfi_def_cfa_offset 184
  75:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
  76:Sequencer.cpp **** 
  77:Sequencer.cpp ****     seq.drum_sequence = drum_seq;
 984              		.loc 1 77 23 view .LVU220
 985 000a 0122     		movs	r2, #1
  73:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, X, _, _, _, _, _, X, _, _, _};
 986              		.loc 1 73 26 view .LVU221
 987 000c D54B     		ldr	r3, .L83
  65:Sequencer.cpp ****     Sequence seq{};
 988              		.loc 1 65 34 view .LVU222
 989 000e 0446     		mov	r4, r0
  74:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
 990              		.loc 1 74 26 view .LVU223
 991 0010 CDF830C0 		str	ip, [sp, #48]
  73:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, X, _, _, _, _, _, X, _, _, _};
 992              		.loc 1 73 26 view .LVU224
 993 0014 0DF10C0A 		add	r10, sp, #12
 994              		.loc 1 77 23 view .LVU225
 995 0018 8DF83020 		strb	r2, [sp, #48]
 996 001c 8DF83220 		strb	r2, [sp, #50]
  75:Sequencer.cpp **** 
 997              		.loc 1 75 26 view .LVU226
 998 0020 0DF11C08 		add	r8, sp, #28
  74:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
 999              		.loc 1 74 26 view .LVU227
 1000 0024 CDF838C0 		str	ip, [sp, #56]
 1001              		.loc 1 77 23 view .LVU228
 1002 0028 5646     		mov	r6, r10
 1003 002a 8DF83820 		strb	r2, [sp, #56]
 1004 002e 0FAD     		add	r5, sp, #60
  74:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
 1005              		.loc 1 74 26 view .LVU229
 1006 0030 CDF82CC0 		str	ip, [sp, #44]
  78:Sequencer.cpp ****     seq.chord_sequence = {_, _, _, _, X, _, X, _, _, _, _, _, X, X, _, _};
  79:Sequencer.cpp ****     seq.bass_sequence = {0, 0, 0, 0, NBF, NBF, NBF, NBF, 4, 4, 4, 4, NBF, NBF, 4, NBF};
 1007              		.loc 1 79 23 view .LVU230
 1008 0034 FF27     		movs	r7, #255
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 119


  74:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
 1009              		.loc 1 74 26 view .LVU231
 1010 0036 CDF834C0 		str	ip, [sp, #52]
 1011              		.loc 1 79 23 view .LVU232
 1012 003a 4FF0040E 		mov	lr, #4
  78:Sequencer.cpp ****     seq.chord_sequence = {_, _, _, _, X, _, X, _, _, _, _, _, X, X, _, _};
 1013              		.loc 1 78 24 view .LVU233
 1014 003e 0DF16C0B 		add	fp, sp, #108
  74:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
 1015              		.loc 1 74 26 view .LVU234
 1016 0042 0DF12C09 		add	r9, sp, #44
  73:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, X, _, _, _, _, _, X, _, _, _};
 1017              		.loc 1 73 26 view .LVU235
 1018 0046 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1019              	.LVL56:
  73:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, X, _, _, _, _, _, X, _, _, _};
 1020              		.loc 1 73 26 view .LVU236
 1021 0048 8AE80F00 		stm	r10, {r0, r1, r2, r3}
  74:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
 1022              		.loc 1 74 5 is_stmt 1 view .LVU237
  75:Sequencer.cpp **** 
 1023              		.loc 1 75 5 view .LVU238
  80:Sequencer.cpp ****     sequences.push_back(seq);
 1024              		.loc 1 80 24 is_stmt 0 view .LVU239
 1025 004c 04F11803 		add	r3, r4, #24
 1026 0050 0193     		str	r3, [sp, #4]
  75:Sequencer.cpp **** 
 1027              		.loc 1 75 26 view .LVU240
 1028 0052 C54B     		ldr	r3, .L83+4
 1029 0054 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1030 0056 88E80F00 		stm	r8, {r0, r1, r2, r3}
  77:Sequencer.cpp ****     seq.chord_sequence = {_, _, _, _, X, _, X, _, _, _, _, _, X, X, _, _};
 1031              		.loc 1 77 5 is_stmt 1 view .LVU241
  77:Sequencer.cpp ****     seq.chord_sequence = {_, _, _, _, X, _, X, _, _, _, _, _, X, X, _, _};
 1032              		.loc 1 77 23 is_stmt 0 view .LVU242
 1033 005a 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1034 005c 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1035 005e 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1036 0060 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1037 0062 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 1038 0066 85E80F00 		stm	r5, {r0, r1, r2, r3}
  78:Sequencer.cpp ****     seq.bass_sequence = {0, 0, 0, 0, NBF, NBF, NBF, NBF, 4, 4, 4, 4, NBF, NBF, 4, NBF};
 1039              		.loc 1 78 5 is_stmt 1 view .LVU243
  78:Sequencer.cpp ****     seq.bass_sequence = {0, 0, 0, 0, NBF, NBF, NBF, NBF, 4, 4, 4, 4, NBF, NBF, 4, NBF};
 1040              		.loc 1 78 24 is_stmt 0 view .LVU244
 1041 006a C04B     		ldr	r3, .L83+8
  79:Sequencer.cpp ****     sequences.push_back(seq);
 1042              		.loc 1 79 23 view .LVU245
 1043 006c CDF87CC0 		str	ip, [sp, #124]
 1044 0070 ADF88CC0 		strh	ip, [sp, #140]	@ movhi
 1045 0074 8DF88070 		strb	r7, [sp, #128]
 1046 0078 8DF88170 		strb	r7, [sp, #129]
 1047 007c 8DF88270 		strb	r7, [sp, #130]
 1048 0080 8DF88370 		strb	r7, [sp, #131]
 1049 0084 8DF884E0 		strb	lr, [sp, #132]
 1050 0088 8DF885E0 		strb	lr, [sp, #133]
 1051 008c 8DF886E0 		strb	lr, [sp, #134]
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 120


  78:Sequencer.cpp ****     seq.bass_sequence = {0, 0, 0, 0, NBF, NBF, NBF, NBF, 4, 4, 4, 4, NBF, NBF, 4, NBF};
 1052              		.loc 1 78 24 view .LVU246
 1053 0090 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1054 0092 8BE80F00 		stm	fp, {r0, r1, r2, r3}
  79:Sequencer.cpp ****     sequences.push_back(seq);
 1055              		.loc 1 79 5 is_stmt 1 view .LVU247
 1056              	.LBB509:
 1057              	.LBB510:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1058              		.loc 2 1189 2 is_stmt 0 view .LVU248
 1059 0096 D4E90703 		ldrd	r0, r3, [r4, #28]
 1060              	.LBE510:
 1061              	.LBE509:
  79:Sequencer.cpp ****     sequences.push_back(seq);
 1062              		.loc 1 79 23 view .LVU249
 1063 009a 8DF887E0 		strb	lr, [sp, #135]
 1064              	.LBB522:
 1065              	.LBB518:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1066              		.loc 2 1189 2 view .LVU250
 1067 009e 9842     		cmp	r0, r3
 1068              	.LBE518:
 1069              	.LBE522:
  79:Sequencer.cpp ****     sequences.push_back(seq);
 1070              		.loc 1 79 23 view .LVU251
 1071 00a0 8DF88AE0 		strb	lr, [sp, #138]
 1072 00a4 8DF88870 		strb	r7, [sp, #136]
 1073 00a8 8DF88970 		strb	r7, [sp, #137]
 1074 00ac 8DF88B70 		strb	r7, [sp, #139]
 1075              		.loc 1 80 5 is_stmt 1 view .LVU252
 1076              	.LVL57:
 1077              	.LBB523:
 1078              	.LBI509:
1187:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 1079              		.loc 2 1187 7 view .LVU253
 1080              	.LBB519:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1081              		.loc 2 1189 2 is_stmt 0 view .LVU254
 1082 00b0 00F06C81 		beq	.L72
 1083              	.LVL58:
 1084              	.LBB511:
 1085              	.LBI511:
 1086              		.loc 7 507 2 is_stmt 1 view .LVU255
 1087              	.LBB512:
 1088              	.LBI512:
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 1089              		.loc 8 148 2 view .LVU256
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 1090              		.loc 8 148 2 is_stmt 0 view .LVU257
 1091              	.LBE512:
 1092              	.LBE511:
 1093              	.LBE519:
 1094              	.LBE523:
 1095              		.loc 9 175 3 is_stmt 1 view .LVU258
 1096              	.LBB524:
 1097              	.LBB520:
 1098              	.LBB515:
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 121


 1099              	.LBB514:
 1100              	.LBB513:
 1101              		.loc 8 150 4 is_stmt 0 view .LVU259
 1102 00b4 5222     		movs	r2, #82
 1103 00b6 0FA9     		add	r1, sp, #60
 1104              	.LVL59:
 1105              		.loc 8 150 4 view .LVU260
 1106 00b8 FFF7FEFF 		bl	memcpy
 1107              	.LVL60:
 1108              		.loc 8 150 4 view .LVU261
 1109              	.LBE513:
 1110              	.LBE514:
 1111              	.LBE515:
1194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 1112              		.loc 2 1194 6 view .LVU262
 1113 00bc E369     		ldr	r3, [r4, #28]
 1114 00be 03F1520C 		add	ip, r3, #82
 1115 00c2 C4F81CC0 		str	ip, [r4, #28]
 1116              	.L73:
 1117              	.LVL61:
1194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 1118              		.loc 2 1194 6 view .LVU263
 1119              	.LBE520:
 1120              	.LBE524:
  81:Sequencer.cpp **** 
  82:Sequencer.cpp ****     // LATIN
  83:Sequencer.cpp ****     drum_seq.kick_steps  = {X, _, _, _, X, _, _, _, X, X, _, _, X, _, _, _};
 1121              		.loc 1 83 5 is_stmt 1 view .LVU264
 1122              		.loc 1 83 26 is_stmt 0 view .LVU265
 1123 00c6 AA4B     		ldr	r3, .L83+12
  84:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, X, _, _, X, _, _, _, _, X, _, _, X, _};
  85:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, X, _, X, _, X, _, X, X, X, _, X, _, X, _};
  86:Sequencer.cpp **** 
  87:Sequencer.cpp ****     seq.drum_sequence = drum_seq;
 1124              		.loc 1 87 23 view .LVU266
 1125 00c8 4FF0000E 		mov	lr, #0
  85:Sequencer.cpp **** 
 1126              		.loc 1 85 26 view .LVU267
 1127 00cc 0DF11C08 		add	r8, sp, #28
 1128              		.loc 1 87 23 view .LVU268
 1129 00d0 5646     		mov	r6, r10
 1130 00d2 0FAD     		add	r5, sp, #60
  88:Sequencer.cpp ****     seq.chord_sequence = {_, _, _, X, _, _, X, X, _, _, _, X, _, _, X, X};
  89:Sequencer.cpp ****     seq.bass_sequence = {8, 8, NBF, 4, 4, NBF, NBF, NBF, 7, 7, NBF, 10, NBF, 10,};
 1131              		.loc 1 89 23 view .LVU269
 1132 00d4 FF27     		movs	r7, #255
  83:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, X, _, _, X, _, _, _, _, X, _, _, X, _};
 1133              		.loc 1 83 26 view .LVU270
 1134 00d6 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1135 00d8 8AE80F00 		stm	r10, {r0, r1, r2, r3}
  84:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, X, _, X, _, X, _, X, X, X, _, X, _, X, _};
 1136              		.loc 1 84 5 is_stmt 1 view .LVU271
  84:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, X, _, X, _, X, _, X, X, X, _, X, _, X, _};
 1137              		.loc 1 84 26 is_stmt 0 view .LVU272
 1138 00dc A54B     		ldr	r3, .L83+16
 1139 00de 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1140 00e0 89E80F00 		stm	r9, {r0, r1, r2, r3}
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 122


  85:Sequencer.cpp **** 
 1141              		.loc 1 85 5 is_stmt 1 view .LVU273
  87:Sequencer.cpp ****     seq.chord_sequence = {_, _, _, X, _, _, X, X, _, _, _, X, _, _, X, X};
 1142              		.loc 1 87 23 is_stmt 0 view .LVU274
 1143 00e4 4FF00103 		mov	r3, #1
 1144 00e8 8DF830E0 		strb	lr, [sp, #48]
 1145 00ec 8DF838E0 		strb	lr, [sp, #56]
 1146 00f0 8DF83230 		strb	r3, [sp, #50]
 1147 00f4 8DF83A30 		strb	r3, [sp, #58]
  85:Sequencer.cpp **** 
 1148              		.loc 1 85 26 view .LVU275
 1149 00f8 9F4B     		ldr	r3, .L83+20
 1150 00fa 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1151 00fc 88E80F00 		stm	r8, {r0, r1, r2, r3}
  87:Sequencer.cpp ****     seq.chord_sequence = {_, _, _, X, _, _, X, X, _, _, _, X, _, _, X, X};
 1152              		.loc 1 87 5 is_stmt 1 view .LVU276
  87:Sequencer.cpp ****     seq.chord_sequence = {_, _, _, X, _, _, X, X, _, _, _, X, _, _, X, X};
 1153              		.loc 1 87 23 is_stmt 0 view .LVU277
 1154 0100 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1155 0102 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1156              		.loc 1 89 23 view .LVU278
 1157 0104 4FF00803 		mov	r3, #8
 1158 0108 8DF87E70 		strb	r7, [sp, #126]
 1159 010c 8DF87C30 		strb	r3, [sp, #124]
 1160 0110 8DF87D30 		strb	r3, [sp, #125]
 1161 0114 4FF00403 		mov	r3, #4
 1162 0118 9846     		mov	r8, r3
 1163 011a 8DF87F30 		strb	r3, [sp, #127]
  87:Sequencer.cpp ****     seq.chord_sequence = {_, _, _, X, _, _, X, X, _, _, _, X, _, _, X, X};
 1164              		.loc 1 87 23 view .LVU279
 1165 011e 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1166 0120 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1167 0122 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 1168 0126 85E80F00 		stm	r5, {r0, r1, r2, r3}
  88:Sequencer.cpp ****     seq.bass_sequence = {8, 8, NBF, 4, 4, NBF, NBF, NBF, 7, 7, NBF, 10, NBF, 10,};
 1169              		.loc 1 88 5 is_stmt 1 view .LVU280
  88:Sequencer.cpp ****     seq.bass_sequence = {8, 8, NBF, 4, 4, NBF, NBF, NBF, 7, 7, NBF, 10, NBF, 10,};
 1170              		.loc 1 88 24 is_stmt 0 view .LVU281
 1171 012a 944B     		ldr	r3, .L83+24
 1172              		.loc 1 89 23 view .LVU282
 1173 012c CDF88AE0 		str	lr, [sp, #138]	@ unaligned
  88:Sequencer.cpp ****     seq.bass_sequence = {8, 8, NBF, 4, 4, NBF, NBF, NBF, 7, 7, NBF, 10, NBF, 10,};
 1174              		.loc 1 88 24 view .LVU283
 1175 0130 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1176 0132 8BE80F00 		stm	fp, {r0, r1, r2, r3}
 1177              		.loc 1 89 5 is_stmt 1 view .LVU284
 1178              		.loc 1 89 23 is_stmt 0 view .LVU285
 1179 0136 4FF00703 		mov	r3, #7
 1180 013a 8DF88080 		strb	r8, [sp, #128]
 1181 013e 8DF88170 		strb	r7, [sp, #129]
 1182 0142 8DF88430 		strb	r3, [sp, #132]
 1183 0146 8DF88530 		strb	r3, [sp, #133]
 1184 014a 4FF00A03 		mov	r3, #10
 1185 014e 8DF88270 		strb	r7, [sp, #130]
 1186 0152 8DF88730 		strb	r3, [sp, #135]
 1187 0156 8DF88930 		strb	r3, [sp, #137]
  90:Sequencer.cpp ****     sequences.push_back(seq);
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 123


 1188              		.loc 1 90 5 is_stmt 1 view .LVU286
 1189              	.LVL62:
 1190              	.LBB525:
 1191              	.LBI525:
1187:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 1192              		.loc 2 1187 7 view .LVU287
 1193              	.LBB526:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1194              		.loc 2 1189 2 is_stmt 0 view .LVU288
 1195 015a 236A     		ldr	r3, [r4, #32]
 1196              	.LBE526:
 1197              	.LBE525:
  89:Sequencer.cpp ****     sequences.push_back(seq);
 1198              		.loc 1 89 23 view .LVU289
 1199 015c 8DF88370 		strb	r7, [sp, #131]
 1200              	.LBB538:
 1201              	.LBB534:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1202              		.loc 2 1189 2 view .LVU290
 1203 0160 6345     		cmp	r3, ip
 1204              	.LBE534:
 1205              	.LBE538:
  89:Sequencer.cpp ****     sequences.push_back(seq);
 1206              		.loc 1 89 23 view .LVU291
 1207 0162 8DF88670 		strb	r7, [sp, #134]
 1208 0166 8DF88870 		strb	r7, [sp, #136]
 1209              	.LBB539:
 1210              	.LBB535:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1211              		.loc 2 1189 2 view .LVU292
 1212 016a 00F01781 		beq	.L74
 1213              	.LVL63:
 1214              	.LBB527:
 1215              	.LBI527:
 1216              		.loc 7 507 2 is_stmt 1 view .LVU293
 1217              	.LBB528:
 1218              	.LBI528:
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 1219              		.loc 8 148 2 view .LVU294
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 1220              		.loc 8 148 2 is_stmt 0 view .LVU295
 1221              	.LBE528:
 1222              	.LBE527:
 1223              	.LBE535:
 1224              	.LBE539:
 1225              		.loc 9 175 3 is_stmt 1 view .LVU296
 1226              	.LBB540:
 1227              	.LBB536:
 1228              	.LBB531:
 1229              	.LBB530:
 1230              	.LBB529:
 1231              		.loc 8 150 4 is_stmt 0 view .LVU297
 1232 016e 6046     		mov	r0, ip
 1233 0170 5222     		movs	r2, #82
 1234 0172 0FA9     		add	r1, sp, #60
 1235              	.LVL64:
 1236              		.loc 8 150 4 view .LVU298
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 124


 1237 0174 FFF7FEFF 		bl	memcpy
 1238              	.LVL65:
 1239              		.loc 8 150 4 view .LVU299
 1240              	.LBE529:
 1241              	.LBE530:
 1242              	.LBE531:
1194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 1243              		.loc 2 1194 6 view .LVU300
 1244 0178 E369     		ldr	r3, [r4, #28]
 1245 017a 03F15208 		add	r8, r3, #82
 1246 017e C4F81C80 		str	r8, [r4, #28]
 1247              	.L75:
 1248              	.LVL66:
1194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 1249              		.loc 2 1194 6 view .LVU301
 1250              	.LBE536:
 1251              	.LBE540:
  91:Sequencer.cpp **** 
  92:Sequencer.cpp ****     // DISCO
  93:Sequencer.cpp ****     drum_seq.kick_steps  = {X, _, _, _, X, _, _, _, X, X, _, _, X, _, _, _};
 1252              		.loc 1 93 5 is_stmt 1 view .LVU302
  94:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, X, _, _, _, _, _, X, _, _, _};
 1253              		.loc 1 94 26 is_stmt 0 view .LVU303
 1254 0182 0027     		movs	r7, #0
  95:Sequencer.cpp ****     drum_seq.hat_steps   = {X, X, X, X, X, X, X, X, X, X, X, X, X, X, X, X};
  96:Sequencer.cpp **** 
  97:Sequencer.cpp ****     seq.drum_sequence = drum_seq;
 1255              		.loc 1 97 23 view .LVU304
 1256 0184 0123     		movs	r3, #1
  95:Sequencer.cpp ****     drum_seq.hat_steps   = {X, X, X, X, X, X, X, X, X, X, X, X, X, X, X, X};
 1257              		.loc 1 95 26 view .LVU305
 1258 0186 DFF800E2 		ldr	lr, .L83+36
 1259              		.loc 1 97 23 view .LVU306
 1260 018a 5646     		mov	r6, r10
  94:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, X, _, _, _, _, _, X, _, _, _};
 1261              		.loc 1 94 26 view .LVU307
 1262 018c C9F80470 		str	r7, [r9, #4]
 1263              		.loc 1 97 23 view .LVU308
 1264 0190 0FAD     		add	r5, sp, #60
 1265 0192 8DF83030 		strb	r3, [sp, #48]
  98:Sequencer.cpp ****     seq.chord_sequence = {_, _, X, _, X, _, _, _, X, _, _, X, _, _, X, _};
  99:Sequencer.cpp ****     seq.bass_sequence = {0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,};
 1266              		.loc 1 99 23 view .LVU309
 1267 0196 4FF0FF0C 		mov	ip, #255
  97:Sequencer.cpp ****     seq.chord_sequence = {_, _, X, _, X, _, _, _, X, _, _, X, _, _, X, _};
 1268              		.loc 1 97 23 view .LVU310
 1269 019a 8DF83230 		strb	r3, [sp, #50]
  94:Sequencer.cpp ****     drum_seq.hat_steps   = {X, X, X, X, X, X, X, X, X, X, X, X, X, X, X, X};
 1270              		.loc 1 94 26 view .LVU311
 1271 019e C9F80C70 		str	r7, [r9, #12]
 1272 01a2 C9F80870 		str	r7, [r9, #8]
  97:Sequencer.cpp ****     seq.chord_sequence = {_, _, X, _, X, _, _, _, X, _, _, X, _, _, X, _};
 1273              		.loc 1 97 23 view .LVU312
 1274 01a6 8DF83830 		strb	r3, [sp, #56]
  93:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, X, _, _, _, _, _, X, _, _, _};
 1275              		.loc 1 93 26 view .LVU313
 1276 01aa AEF14003 		sub	r3, lr, #64
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 125


  94:Sequencer.cpp ****     drum_seq.hat_steps   = {X, X, X, X, X, X, X, X, X, X, X, X, X, X, X, X};
 1277              		.loc 1 94 26 view .LVU314
 1278 01ae 0B97     		str	r7, [sp, #44]
  93:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, X, _, _, _, _, _, X, _, _, _};
 1279              		.loc 1 93 26 view .LVU315
 1280 01b0 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1281 01b2 8AE80F00 		stm	r10, {r0, r1, r2, r3}
  94:Sequencer.cpp ****     drum_seq.hat_steps   = {X, X, X, X, X, X, X, X, X, X, X, X, X, X, X, X};
 1282              		.loc 1 94 5 is_stmt 1 view .LVU316
  95:Sequencer.cpp **** 
 1283              		.loc 1 95 5 view .LVU317
  95:Sequencer.cpp **** 
 1284              		.loc 1 95 26 is_stmt 0 view .LVU318
 1285 01b6 9EE80F00 		ldm	lr, {r0, r1, r2, r3}
 1286 01ba 0DF11C0E 		add	lr, sp, #28
 1287 01be 8EE80F00 		stm	lr, {r0, r1, r2, r3}
  97:Sequencer.cpp ****     seq.chord_sequence = {_, _, X, _, X, _, _, _, X, _, _, X, _, _, X, _};
 1288              		.loc 1 97 5 is_stmt 1 view .LVU319
  97:Sequencer.cpp ****     seq.chord_sequence = {_, _, X, _, X, _, _, _, X, _, _, X, _, _, X, _};
 1289              		.loc 1 97 23 is_stmt 0 view .LVU320
 1290 01c2 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1291 01c4 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1292 01c6 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1293 01c8 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1294 01ca 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 1295 01ce 85E80F00 		stm	r5, {r0, r1, r2, r3}
  98:Sequencer.cpp ****     seq.bass_sequence = {0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,};
 1296              		.loc 1 98 5 is_stmt 1 view .LVU321
  98:Sequencer.cpp ****     seq.bass_sequence = {0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,};
 1297              		.loc 1 98 24 is_stmt 0 view .LVU322
 1298 01d2 6B4B     		ldr	r3, .L83+28
 1299              		.loc 1 99 23 view .LVU323
 1300 01d4 ADF88C70 		strh	r7, [sp, #140]	@ movhi
  98:Sequencer.cpp ****     seq.bass_sequence = {0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,};
 1301              		.loc 1 98 24 view .LVU324
 1302 01d8 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1303              		.loc 1 99 23 view .LVU325
 1304 01da CDE91F77 		strd	r7, r7, [sp, #124]
  98:Sequencer.cpp ****     seq.bass_sequence = {0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,0, NBF,};
 1305              		.loc 1 98 24 view .LVU326
 1306 01de 8BE80F00 		stm	fp, {r0, r1, r2, r3}
 1307              		.loc 1 99 5 is_stmt 1 view .LVU327
 1308              		.loc 1 99 23 is_stmt 0 view .LVU328
 1309 01e2 CDE92177 		strd	r7, r7, [sp, #132]
 1310 01e6 8DF87DC0 		strb	ip, [sp, #125]
 1311 01ea 8DF87FC0 		strb	ip, [sp, #127]
 1312 01ee 8DF881C0 		strb	ip, [sp, #129]
 1313 01f2 8DF883C0 		strb	ip, [sp, #131]
 1314 01f6 8DF885C0 		strb	ip, [sp, #133]
 1315              	.LBB541:
 1316              	.LBB542:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1317              		.loc 2 1189 2 view .LVU329
 1318 01fa 236A     		ldr	r3, [r4, #32]
 1319              	.LBE542:
 1320              	.LBE541:
 1321              		.loc 1 99 23 view .LVU330
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 126


 1322 01fc 8DF887C0 		strb	ip, [sp, #135]
 1323              	.LBB554:
 1324              	.LBB550:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1325              		.loc 2 1189 2 view .LVU331
 1326 0200 4345     		cmp	r3, r8
 1327              	.LBE550:
 1328              	.LBE554:
 1329              		.loc 1 99 23 view .LVU332
 1330 0202 8DF889C0 		strb	ip, [sp, #137]
 1331 0206 8DF88BC0 		strb	ip, [sp, #139]
 100:Sequencer.cpp ****     sequences.push_back(seq);
 1332              		.loc 1 100 5 is_stmt 1 view .LVU333
 1333              	.LVL67:
 1334              	.LBB555:
 1335              	.LBI541:
1187:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 1336              		.loc 2 1187 7 view .LVU334
 1337              	.LBB551:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1338              		.loc 2 1189 2 is_stmt 0 view .LVU335
 1339 020a 00F0CF80 		beq	.L76
 1340              	.LVL68:
 1341              	.LBB543:
 1342              	.LBI543:
 1343              		.loc 7 507 2 is_stmt 1 view .LVU336
 1344              	.LBB544:
 1345              	.LBI544:
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 1346              		.loc 8 148 2 view .LVU337
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 1347              		.loc 8 148 2 is_stmt 0 view .LVU338
 1348              	.LBE544:
 1349              	.LBE543:
 1350              	.LBE551:
 1351              	.LBE555:
 1352              		.loc 9 175 3 is_stmt 1 view .LVU339
 1353              	.LBB556:
 1354              	.LBB552:
 1355              	.LBB547:
 1356              	.LBB546:
 1357              	.LBB545:
 1358              		.loc 8 150 4 is_stmt 0 view .LVU340
 1359 020e 4046     		mov	r0, r8
 1360 0210 5222     		movs	r2, #82
 1361 0212 0FA9     		add	r1, sp, #60
 1362              	.LVL69:
 1363              		.loc 8 150 4 view .LVU341
 1364 0214 FFF7FEFF 		bl	memcpy
 1365              	.LVL70:
 1366              		.loc 8 150 4 view .LVU342
 1367              	.LBE545:
 1368              	.LBE546:
 1369              	.LBE547:
1194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 1370              		.loc 2 1194 6 view .LVU343
 1371 0218 E369     		ldr	r3, [r4, #28]
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 127


 1372 021a 03F1520E 		add	lr, r3, #82
 1373 021e C4F81CE0 		str	lr, [r4, #28]
 1374              	.L77:
 1375              	.LVL71:
1194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 1376              		.loc 2 1194 6 view .LVU344
 1377              	.LBE552:
 1378              	.LBE556:
 101:Sequencer.cpp **** 
 102:Sequencer.cpp ****     // TANGO
 103:Sequencer.cpp ****     drum_seq.kick_steps  = {X, _, _, _, X, _, _, _, X, _, _, _, X, _, X, _};
 1379              		.loc 1 103 5 is_stmt 1 view .LVU345
 1380              		.loc 1 103 26 is_stmt 0 view .LVU346
 1381 0222 584B     		ldr	r3, .L83+32
 104:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, _, _, _, _, _, _, X, _, X, _};
 1382              		.loc 1 104 26 view .LVU347
 1383 0224 0026     		movs	r6, #0
 105:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, _, _, X, _, _, _, X, _, _, _, X, _, X, _};
 106:Sequencer.cpp **** 
 107:Sequencer.cpp ****     seq.drum_sequence = drum_seq;
 1384              		.loc 1 107 23 view .LVU348
 1385 0226 4FF00108 		mov	r8, #1
 1386 022a D446     		mov	ip, r10
 103:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, _, _, _, _, _, _, X, _, X, _};
 1387              		.loc 1 103 26 view .LVU349
 1388 022c 1D46     		mov	r5, r3
 104:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, _, _, _, _, _, _, X, _, X, _};
 1389              		.loc 1 104 26 view .LVU350
 1390 022e C9F80460 		str	r6, [r9, #4]
 1391 0232 C9F80C60 		str	r6, [r9, #12]
 1392              		.loc 1 107 23 view .LVU351
 1393 0236 0FAF     		add	r7, sp, #60
 104:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, _, _, _, _, _, _, X, _, X, _};
 1394              		.loc 1 104 26 view .LVU352
 1395 0238 C9F80860 		str	r6, [r9, #8]
 1396              		.loc 1 107 23 view .LVU353
 1397 023c 8DF83080 		strb	r8, [sp, #48]
 1398 0240 8DF83880 		strb	r8, [sp, #56]
 1399 0244 8DF83A80 		strb	r8, [sp, #58]
 104:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, _, _, _, _, _, _, X, _, X, _};
 1400              		.loc 1 104 26 view .LVU354
 1401 0248 0B96     		str	r6, [sp, #44]
 103:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, _, _, _, _, _, _, X, _, X, _};
 1402              		.loc 1 103 26 view .LVU355
 1403 024a 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1404 024c 8AE80F00 		stm	r10, {r0, r1, r2, r3}
 104:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, _, _, _, _, _, _, X, _, X, _};
 1405              		.loc 1 104 5 is_stmt 1 view .LVU356
 105:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, _, _, X, _, _, _, X, _, _, _, X, _, X, _};
 1406              		.loc 1 105 5 view .LVU357
 105:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, _, _, X, _, _, _, X, _, _, _, X, _, X, _};
 1407              		.loc 1 105 26 is_stmt 0 view .LVU358
 1408 0250 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 1409 0254 07AD     		add	r5, sp, #28
 1410 0256 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1411              		.loc 1 107 5 is_stmt 1 view .LVU359
 1412              		.loc 1 107 23 is_stmt 0 view .LVU360
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 128


 1413 025a BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1414 025e 0FC7     		stmia	r7!, {r0, r1, r2, r3}
 1415 0260 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 108:Sequencer.cpp ****     seq.chord_sequence = {_, _, _, _, X, _, _, _, _, _, _, _, X, _, X, _};
 1416              		.loc 1 108 24 view .LVU361
 1417 0264 CBF80460 		str	r6, [fp, #4]
 1418 0268 CBF80C60 		str	r6, [fp, #12]
 1419 026c CBF80860 		str	r6, [fp, #8]
 1420 0270 1B96     		str	r6, [sp, #108]
 1421              	.LBB557:
 1422              	.LBB558:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1423              		.loc 2 1189 2 view .LVU362
 1424 0272 266A     		ldr	r6, [r4, #32]
 1425              	.LBE558:
 1426              	.LBE557:
 1427              		.loc 1 108 24 view .LVU363
 1428 0274 8DF87080 		strb	r8, [sp, #112]
 1429              	.LBB570:
 1430              	.LBB566:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1431              		.loc 2 1189 2 view .LVU364
 1432 0278 7645     		cmp	r6, lr
 1433              	.LBE566:
 1434              	.LBE570:
 1435              		.loc 1 108 24 view .LVU365
 1436 027a 8DF87880 		strb	r8, [sp, #120]
 1437 027e 8DF87A80 		strb	r8, [sp, #122]
 107:Sequencer.cpp ****     seq.chord_sequence = {_, _, _, _, X, _, _, _, _, _, _, _, X, _, X, _};
 1438              		.loc 1 107 23 view .LVU366
 1439 0282 0FC7     		stmia	r7!, {r0, r1, r2, r3}
 1440 0284 9CE80F00 		ldm	ip, {r0, r1, r2, r3}
 1441 0288 87E80F00 		stm	r7, {r0, r1, r2, r3}
 1442              		.loc 1 108 5 is_stmt 1 view .LVU367
 109:Sequencer.cpp ****     sequences.push_back(seq);
 1443              		.loc 1 109 5 view .LVU368
 1444              	.LVL72:
 1445              	.LBB571:
 1446              	.LBI557:
1187:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 1447              		.loc 2 1187 7 view .LVU369
 1448              	.LBB567:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1449              		.loc 2 1189 2 is_stmt 0 view .LVU370
 1450 028c 00F09680 		beq	.L78
 1451              	.LVL73:
 1452              	.LBB559:
 1453              	.LBI559:
 1454              		.loc 7 507 2 is_stmt 1 view .LVU371
 1455              	.LBB560:
 1456              	.LBI560:
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 1457              		.loc 8 148 2 view .LVU372
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 1458              		.loc 8 148 2 is_stmt 0 view .LVU373
 1459              	.LBE560:
 1460              	.LBE559:
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 129


 1461              	.LBE567:
 1462              	.LBE571:
 1463              		.loc 9 175 3 is_stmt 1 view .LVU374
 1464              	.LBB572:
 1465              	.LBB568:
 1466              	.LBB563:
 1467              	.LBB562:
 1468              	.LBB561:
 1469              		.loc 8 150 4 is_stmt 0 view .LVU375
 1470 0290 7046     		mov	r0, lr
 1471 0292 5222     		movs	r2, #82
 1472 0294 0FA9     		add	r1, sp, #60
 1473              	.LVL74:
 1474              		.loc 8 150 4 view .LVU376
 1475 0296 FFF7FEFF 		bl	memcpy
 1476              	.LVL75:
 1477              		.loc 8 150 4 view .LVU377
 1478              	.LBE561:
 1479              	.LBE562:
 1480              	.LBE563:
1194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 1481              		.loc 2 1194 6 view .LVU378
 1482 029a E369     		ldr	r3, [r4, #28]
 1483 029c 03F15208 		add	r8, r3, #82
 1484 02a0 C4F81C80 		str	r8, [r4, #28]
 1485              	.L79:
 1486              	.LVL76:
1194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 1487              		.loc 2 1194 6 view .LVU379
 1488              	.LBE568:
 1489              	.LBE572:
 110:Sequencer.cpp **** 
 111:Sequencer.cpp ****     // BLUES
 112:Sequencer.cpp ****     drum_seq.kick_steps  = {X, _, _, _, X, _, _, _, X, _, _, _, X, _, X, _};
 1490              		.loc 1 112 5 is_stmt 1 view .LVU380
 113:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, _, _, _, _, _, _, X, _, _, _};
 1491              		.loc 1 113 26 is_stmt 0 view .LVU381
 1492 02a4 0027     		movs	r7, #0
 114:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
 115:Sequencer.cpp **** 
 116:Sequencer.cpp ****     seq.drum_sequence = drum_seq;
 1493              		.loc 1 116 23 view .LVU382
 1494 02a6 0123     		movs	r3, #1
 114:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
 1495              		.loc 1 114 26 view .LVU383
 1496 02a8 2F4D     		ldr	r5, .L83+4
 1497              		.loc 1 116 23 view .LVU384
 1498 02aa D646     		mov	lr, r10
 113:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, _, _, _, _, _, _, X, _, _, _};
 1499              		.loc 1 113 26 view .LVU385
 1500 02ac C9F80470 		str	r7, [r9, #4]
 1501              		.loc 1 116 23 view .LVU386
 1502 02b0 0DF13C0C 		add	ip, sp, #60
 1503 02b4 8DF83030 		strb	r3, [sp, #48]
 117:Sequencer.cpp ****     seq.chord_sequence = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
 118:Sequencer.cpp ****     seq.bass_sequence = {NBF, 0, NBF, 2, NBF, 3, NBF, 4, NBF, 0, NBF, 2, NBF, 3, NBF, 8};
 1504              		.loc 1 118 23 view .LVU387
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 130


 1505 02b8 FF26     		movs	r6, #255
 113:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
 1506              		.loc 1 113 26 view .LVU388
 1507 02ba 0B97     		str	r7, [sp, #44]
 1508 02bc C9E90277 		strd	r7, r7, [r9, #8]
 116:Sequencer.cpp ****     seq.chord_sequence = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
 1509              		.loc 1 116 23 view .LVU389
 1510 02c0 8DF83830 		strb	r3, [sp, #56]
 1511              		.loc 1 118 23 view .LVU390
 1512 02c4 4FF00309 		mov	r9, #3
 112:Sequencer.cpp ****     drum_seq.snare_steps = {_, _, _, _, X, _, _, _, _, _, _, _, X, _, _, _};
 1513              		.loc 1 112 26 view .LVU391
 1514 02c8 2E4B     		ldr	r3, .L83+32
 1515 02ca 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1516 02cc 8AE80F00 		stm	r10, {r0, r1, r2, r3}
 113:Sequencer.cpp ****     drum_seq.hat_steps   = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
 1517              		.loc 1 113 5 is_stmt 1 view .LVU392
 114:Sequencer.cpp **** 
 1518              		.loc 1 114 5 view .LVU393
 114:Sequencer.cpp **** 
 1519              		.loc 1 114 26 is_stmt 0 view .LVU394
 1520 02d0 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 1521 02d4 0DF11C0A 		add	r10, sp, #28
 1522 02d8 8AE80F00 		stm	r10, {r0, r1, r2, r3}
 116:Sequencer.cpp ****     seq.chord_sequence = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
 1523              		.loc 1 116 5 is_stmt 1 view .LVU395
 116:Sequencer.cpp ****     seq.chord_sequence = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
 1524              		.loc 1 116 23 is_stmt 0 view .LVU396
 1525 02dc BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1526 02e0 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1527 02e4 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1528 02e8 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1529              		.loc 1 118 23 view .LVU397
 1530 02ec 4FF00403 		mov	r3, #4
 1531 02f0 1F97     		str	r7, [sp, #124]
 1532 02f2 2197     		str	r7, [sp, #132]
 1533 02f4 8DF88330 		strb	r3, [sp, #131]
 1534 02f8 ADF88C70 		strh	r7, [sp, #140]	@ movhi
 1535 02fc 4FF00207 		mov	r7, #2
 1536 0300 8DF87C60 		strb	r6, [sp, #124]
 1537 0304 8DF87E60 		strb	r6, [sp, #126]
 1538 0308 8DF87F70 		strb	r7, [sp, #127]
 1539 030c 8DF88060 		strb	r6, [sp, #128]
 1540 0310 8DF88190 		strb	r9, [sp, #129]
 1541 0314 8DF88260 		strb	r6, [sp, #130]
 116:Sequencer.cpp ****     seq.chord_sequence = {X, _, X, _, X, _, X, _, X, _, X, _, X, _, X, _};
 1542              		.loc 1 116 23 view .LVU398
 1543 0318 9EE80F00 		ldm	lr, {r0, r1, r2, r3}
 1544 031c 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 117:Sequencer.cpp ****     seq.bass_sequence = {NBF, 0, NBF, 2, NBF, 3, NBF, 4, NBF, 0, NBF, 2, NBF, 3, NBF, 8};
 1545              		.loc 1 117 5 is_stmt 1 view .LVU399
 117:Sequencer.cpp ****     seq.bass_sequence = {NBF, 0, NBF, 2, NBF, 3, NBF, 4, NBF, 0, NBF, 2, NBF, 3, NBF, 8};
 1546              		.loc 1 117 24 is_stmt 0 view .LVU400
 1547 0320 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 1548 0324 8BE80F00 		stm	fp, {r0, r1, r2, r3}
 1549              		.loc 1 118 5 is_stmt 1 view .LVU401
 1550              		.loc 1 118 23 is_stmt 0 view .LVU402
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 131


 1551 0328 4FF00803 		mov	r3, #8
 1552 032c 8DF88460 		strb	r6, [sp, #132]
 1553 0330 8DF88770 		strb	r7, [sp, #135]
 1554 0334 8DF88B30 		strb	r3, [sp, #139]
 119:Sequencer.cpp ****     sequences.push_back(seq);
 1555              		.loc 1 119 5 is_stmt 1 view .LVU403
 1556              	.LVL77:
 1557              	.LBB573:
 1558              	.LBI573:
1187:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 1559              		.loc 2 1187 7 view .LVU404
 1560              	.LBB574:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1561              		.loc 2 1189 2 is_stmt 0 view .LVU405
 1562 0338 236A     		ldr	r3, [r4, #32]
 1563              	.LBE574:
 1564              	.LBE573:
 118:Sequencer.cpp ****     sequences.push_back(seq);
 1565              		.loc 1 118 23 view .LVU406
 1566 033a 8DF88990 		strb	r9, [sp, #137]
 1567              	.LBB586:
 1568              	.LBB582:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1569              		.loc 2 1189 2 view .LVU407
 1570 033e 9845     		cmp	r8, r3
 1571              	.LBE582:
 1572              	.LBE586:
 118:Sequencer.cpp ****     sequences.push_back(seq);
 1573              		.loc 1 118 23 view .LVU408
 1574 0340 8DF88660 		strb	r6, [sp, #134]
 1575 0344 8DF88860 		strb	r6, [sp, #136]
 1576 0348 8DF88A60 		strb	r6, [sp, #138]
 1577              	.LBB587:
 1578              	.LBB583:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1579              		.loc 2 1189 2 view .LVU409
 1580 034c 3ED0     		beq	.L80
 1581              	.LVL78:
 1582              	.LBB575:
 1583              	.LBI575:
 1584              		.loc 7 507 2 is_stmt 1 view .LVU410
 1585              	.LBB576:
 1586              	.LBI576:
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 1587              		.loc 8 148 2 view .LVU411
 148:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 1588              		.loc 8 148 2 is_stmt 0 view .LVU412
 1589              	.LBE576:
 1590              	.LBE575:
 1591              	.LBE583:
 1592              	.LBE587:
 1593              		.loc 9 175 3 is_stmt 1 view .LVU413
 1594              	.LBB588:
 1595              	.LBB584:
 1596              	.LBB579:
 1597              	.LBB578:
 1598              	.LBB577:
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 132


 1599              		.loc 8 150 4 is_stmt 0 view .LVU414
 1600 034e 5222     		movs	r2, #82
 1601 0350 0FA9     		add	r1, sp, #60
 1602              	.LVL79:
 1603              		.loc 8 150 4 view .LVU415
 1604 0352 4046     		mov	r0, r8
 1605 0354 FFF7FEFF 		bl	memcpy
 1606              	.LVL80:
 1607              		.loc 8 150 4 view .LVU416
 1608              	.LBE577:
 1609              	.LBE578:
 1610              	.LBE579:
1194:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 1611              		.loc 2 1194 6 view .LVU417
 1612 0358 E369     		ldr	r3, [r4, #28]
 1613 035a 5233     		adds	r3, r3, #82
 1614 035c E361     		str	r3, [r4, #28]
 1615              	.LBE584:
 1616              	.LBE588:
 120:Sequencer.cpp **** 
 121:Sequencer.cpp **** }
 1617              		.loc 1 121 1 view .LVU418
 1618 035e 25B0     		add	sp, sp, #148
 1619              		.cfi_remember_state
 1620              		.cfi_def_cfa_offset 36
 1621              		@ sp needed
 1622 0360 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1623              	.LVL81:
 1624              	.L84:
 1625              		.loc 1 121 1 view .LVU419
 1626              		.align	2
 1627              	.L83:
 1628 0364 00000000 		.word	.LANCHOR0
 1629 0368 10000000 		.word	.LANCHOR0+16
 1630 036c 20000000 		.word	.LANCHOR0+32
 1631 0370 30000000 		.word	.LANCHOR0+48
 1632 0374 40000000 		.word	.LANCHOR0+64
 1633 0378 50000000 		.word	.LANCHOR0+80
 1634 037c 60000000 		.word	.LANCHOR0+96
 1635 0380 80000000 		.word	.LANCHOR0+128
 1636 0384 90000000 		.word	.LANCHOR0+144
 1637 0388 70000000 		.word	.LANCHOR0+112
 1638              	.LVL82:
 1639              	.L72:
 1640              		.cfi_restore_state
 1641              	.LBB589:
 1642              	.LBB521:
 1643              	.LBB516:
 1644              	.LBI516:
 829:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1645              		.loc 2 829 7 is_stmt 1 view .LVU420
 1646              	.LBB517:
 1647              	.LBI517:
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1648              		.loc 6 978 7 view .LVU421
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1649              		.loc 6 978 7 is_stmt 0 view .LVU422
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 133


 1650              	.LBE517:
 1651              	.LBE516:
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1652              		.loc 2 1198 21 view .LVU423
 1653 038c 0146     		mov	r1, r0
 1654 038e 0FAA     		add	r2, sp, #60
 1655              	.LVL83:
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1656              		.loc 2 1198 21 view .LVU424
 1657 0390 0198     		ldr	r0, [sp, #4]
 1658 0392 FFF7FEFF 		bl	_ZNSt6vectorIN9Sequencer8SequenceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_i
 1659              	.LVL84:
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1660              		.loc 2 1198 21 view .LVU425
 1661              	.LBE521:
 1662              	.LBE589:
 1663              	.LBB590:
 1664              	.LBB537:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1665              		.loc 2 1189 20 view .LVU426
 1666 0396 D4F81CC0 		ldr	ip, [r4, #28]
 1667 039a 94E6     		b	.L73
 1668              	.LVL85:
 1669              	.L74:
 1670              	.LBB532:
 1671              	.LBI532:
 829:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1672              		.loc 2 829 7 is_stmt 1 view .LVU427
 1673              	.LBB533:
 1674              	.LBI533:
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1675              		.loc 6 978 7 view .LVU428
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1676              		.loc 6 978 7 is_stmt 0 view .LVU429
 1677              	.LBE533:
 1678              	.LBE532:
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1679              		.loc 2 1198 21 view .LVU430
 1680 039c 6146     		mov	r1, ip
 1681 039e 0FAA     		add	r2, sp, #60
 1682              	.LVL86:
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1683              		.loc 2 1198 21 view .LVU431
 1684 03a0 0198     		ldr	r0, [sp, #4]
 1685 03a2 FFF7FEFF 		bl	_ZNSt6vectorIN9Sequencer8SequenceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_i
 1686              	.LVL87:
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1687              		.loc 2 1198 21 view .LVU432
 1688              	.LBE537:
 1689              	.LBE590:
 1690              	.LBB591:
 1691              	.LBB553:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1692              		.loc 2 1189 20 view .LVU433
 1693 03a6 D4F81C80 		ldr	r8, [r4, #28]
 1694 03aa EAE6     		b	.L75
 1695              	.LVL88:
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 134


 1696              	.L76:
 1697              	.LBB548:
 1698              	.LBI548:
 829:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1699              		.loc 2 829 7 is_stmt 1 view .LVU434
 1700              	.LBB549:
 1701              	.LBI549:
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1702              		.loc 6 978 7 view .LVU435
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1703              		.loc 6 978 7 is_stmt 0 view .LVU436
 1704              	.LBE549:
 1705              	.LBE548:
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1706              		.loc 2 1198 21 view .LVU437
 1707 03ac 4146     		mov	r1, r8
 1708 03ae 0FAA     		add	r2, sp, #60
 1709              	.LVL89:
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1710              		.loc 2 1198 21 view .LVU438
 1711 03b0 0198     		ldr	r0, [sp, #4]
 1712 03b2 FFF7FEFF 		bl	_ZNSt6vectorIN9Sequencer8SequenceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_i
 1713              	.LVL90:
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1714              		.loc 2 1198 21 view .LVU439
 1715              	.LBE553:
 1716              	.LBE591:
 1717              	.LBB592:
 1718              	.LBB569:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1719              		.loc 2 1189 20 view .LVU440
 1720 03b6 D4F81CE0 		ldr	lr, [r4, #28]
 1721 03ba 32E7     		b	.L77
 1722              	.LVL91:
 1723              	.L78:
 1724              	.LBB564:
 1725              	.LBI564:
 829:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1726              		.loc 2 829 7 is_stmt 1 view .LVU441
 1727              	.LBB565:
 1728              	.LBI565:
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1729              		.loc 6 978 7 view .LVU442
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1730              		.loc 6 978 7 is_stmt 0 view .LVU443
 1731              	.LBE565:
 1732              	.LBE564:
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1733              		.loc 2 1198 21 view .LVU444
 1734 03bc 7146     		mov	r1, lr
 1735 03be 0FAA     		add	r2, sp, #60
 1736              	.LVL92:
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1737              		.loc 2 1198 21 view .LVU445
 1738 03c0 0198     		ldr	r0, [sp, #4]
 1739 03c2 FFF7FEFF 		bl	_ZNSt6vectorIN9Sequencer8SequenceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_i
 1740              	.LVL93:
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 135


1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1741              		.loc 2 1198 21 view .LVU446
 1742              	.LBE569:
 1743              	.LBE592:
 1744              	.LBB593:
 1745              	.LBB585:
1189:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 1746              		.loc 2 1189 20 view .LVU447
 1747 03c6 D4F81C80 		ldr	r8, [r4, #28]
 1748 03ca 6BE7     		b	.L79
 1749              	.LVL94:
 1750              	.L80:
 1751              	.LBB580:
 1752              	.LBI580:
 829:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1753              		.loc 2 829 7 is_stmt 1 view .LVU448
 1754              	.LBB581:
 1755              	.LBI581:
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1756              		.loc 6 978 7 view .LVU449
 978:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1757              		.loc 6 978 7 is_stmt 0 view .LVU450
 1758              	.LBE581:
 1759              	.LBE580:
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1760              		.loc 2 1198 21 view .LVU451
 1761 03cc 0FAA     		add	r2, sp, #60
 1762              	.LVL95:
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1763              		.loc 2 1198 21 view .LVU452
 1764 03ce 4146     		mov	r1, r8
 1765 03d0 0198     		ldr	r0, [sp, #4]
 1766 03d2 FFF7FEFF 		bl	_ZNSt6vectorIN9Sequencer8SequenceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_i
 1767              	.LVL96:
1198:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1768              		.loc 2 1198 21 view .LVU453
 1769              	.LBE585:
 1770              	.LBE593:
 1771              		.loc 1 121 1 view .LVU454
 1772 03d6 25B0     		add	sp, sp, #148
 1773              		.cfi_def_cfa_offset 36
 1774              		@ sp needed
 1775 03d8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1776              		.loc 1 121 1 view .LVU455
 1777              		.cfi_endproc
 1778              	.LFE4307:
 1780              		.section	.text._ZN9SequencerC2EfR9DrumSynthR10ChordSynth,"ax",%progbits
 1781              		.align	1
 1782              		.p2align 2,,3
 1783              		.global	_ZN9SequencerC2EfR9DrumSynthR10ChordSynth
 1784              		.syntax unified
 1785              		.thumb
 1786              		.thumb_func
 1787              		.fpu fpv5-d16
 1789              	_ZN9SequencerC2EfR9DrumSynthR10ChordSynth:
 1790              	.LVL97:
 1791              	.LFB4303:
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 136


  18:Sequencer.cpp ****     :  bpm(105), sample_rate(sample_rate), drum_synth(drum_synth), chord_synth(chord_synth) {
 1792              		.loc 1 18 1 is_stmt 1 view -0
 1793              		.cfi_startproc
 1794              		@ args = 0, pretend = 0, frame = 0
 1795              		@ frame_needed = 0, uses_anonymous_args = 0
 1796              	.LBB594:
  19:Sequencer.cpp ****         init_sequences();
 1797              		.loc 1 19 91 is_stmt 0 view .LVU457
 1798 0000 0023     		movs	r3, #0
 1799              	.LBE594:
  18:Sequencer.cpp ****     :  bpm(105), sample_rate(sample_rate), drum_synth(drum_synth), chord_synth(chord_synth) {
 1800              		.loc 1 18 1 view .LVU458
 1801 0002 10B5     		push	{r4, lr}
 1802              		.cfi_def_cfa_offset 8
 1803              		.cfi_offset 4, -8
 1804              		.cfi_offset 14, -4
 1805              	.LBB607:
  19:Sequencer.cpp ****         init_sequences();
 1806              		.loc 1 19 91 view .LVU459
 1807 0004 8360     		str	r3, [r0, #8]
 1808              	.LBE607:
  18:Sequencer.cpp ****     :  bpm(105), sample_rate(sample_rate), drum_synth(drum_synth), chord_synth(chord_synth) {
 1809              		.loc 1 18 1 view .LVU460
 1810 0006 0446     		mov	r4, r0
 1811              	.LBB608:
  19:Sequencer.cpp ****         init_sequences();
 1812              		.loc 1 19 91 view .LVU461
 1813 0008 0375     		strb	r3, [r0, #20]
 1814              	.LVL98:
 1815              	.LBB595:
 1816              	.LBI595:
 487:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 1817              		.loc 2 487 7 is_stmt 1 view .LVU462
 1818              	.LBB596:
 1819              	.LBI596:
 288:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 1820              		.loc 2 288 7 view .LVU463
 1821              	.LBB597:
 1822              	.LBI597:
 131:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 1823              		.loc 2 131 2 view .LVU464
 1824              	.LBB598:
 1825              	.LBI598:
 1826              		.file 11 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\allocator.
   1:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // Allocators -*- C++ -*-
   2:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
   3:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** //
   5:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // terms of the GNU General Public License as published by the
   8:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // any later version.
  10:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  11:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 137


  14:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // GNU General Public License for more details.
  15:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  16:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  20:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  25:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** /*
  26:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * Copyright (c) 1996-1997
  27:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  *
  29:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * that both that copyright notice and this permission notice appear
  33:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * representations about the suitability of this software for any
  35:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  */
  37:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  38:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** /** @file bits/allocator.h
  39:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  *  This is an internal header file, included by other library headers.
  40:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  */
  42:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  43:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #ifndef _ALLOCATOR_H
  44:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #define _ALLOCATOR_H 1
  45:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  46:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #include <bits/memoryfwd.h>
  48:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus >= 201103L
  49:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #include <type_traits>
  50:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif
  51:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  52:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  54:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** {
  56:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  57:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  58:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****   /**
  59:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *  @addtogroup allocators
  60:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *  @{
  61:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    */
  62:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  63:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****   /// allocator<void> specialization.
  64:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****   template<>
  65:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     class allocator<void>
  66:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     {
  67:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     public:
  68:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef void        value_type;
  69:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef size_t      size_type;
  70:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef ptrdiff_t   difference_type;
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 138


  71:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus <= 201703L
  72:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef void*       pointer;
  73:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef const void* const_pointer;
  74:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  75:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Tp1>
  76:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	struct rebind
  77:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	{ typedef allocator<_Tp1> other; };
  78:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #else
  79:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       allocator() = default;
  80:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  81:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Up>
  82:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	constexpr
  83:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	allocator(const allocator<_Up>&) { }
  84:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif // ! C++20
  85:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  86:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus >= 201103L && __cplusplus <= 201703L
  87:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  88:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  89:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  90:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  91:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef true_type is_always_equal;
  92:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  93:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Up, typename... _Args>
  94:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	void
  95:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	construct(_Up* __p, _Args&&... __args)
  96:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
  97:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  98:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  99:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Up>
 100:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	void
 101:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	destroy(_Up* __p)
 102:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	noexcept(std::is_nothrow_destructible<_Up>::value)
 103:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	{ __p->~_Up(); }
 104:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif // C++11 to C++17
 105:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     };
 106:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 107:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****   /**
 108:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
 109:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *
 110:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 111:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *  for further details.
 112:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *
 113:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 114:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    */
 115:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****   template<typename _Tp>
 116:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     class allocator : public __allocator_base<_Tp>
 117:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     {
 118:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     public:
 119:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef _Tp        value_type;
 120:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef size_t     size_type;
 121:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef ptrdiff_t  difference_type;
 122:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus <= 201703L
 123:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef _Tp*       pointer;
 124:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef const _Tp* const_pointer;
 125:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef _Tp&       reference;
 126:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef const _Tp& const_reference;
 127:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 139


 128:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Tp1>
 129:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	struct rebind
 130:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	{ typedef allocator<_Tp1> other; };
 131:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif
 132:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 133:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus >= 201103L
 134:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 135:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 136:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 137:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 138:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef true_type is_always_equal;
 139:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif
 140:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 141:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 142:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 143:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       _GLIBCXX20_CONSTEXPR
 144:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 1827              		.loc 11 144 7 view .LVU465
 1828              	.LBB599:
 1829              	.LBI599:
  79:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 1830              		.loc 8 79 7 view .LVU466
  79:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 1831              		.loc 8 79 7 is_stmt 0 view .LVU467
 1832              	.LBE599:
 1833              	.LBE598:
 1834              	.LBB600:
 1835              	.LBI600:
  97:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 1836              		.loc 2 97 2 is_stmt 1 view .LVU468
 1837              	.LBB601:
  98:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 1838              		.loc 2 98 47 is_stmt 0 view .LVU469
 1839 000a 0362     		str	r3, [r0, #32]
 1840              	.LVL99:
  98:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 1841              		.loc 2 98 47 view .LVU470
 1842              	.LBE601:
 1843              	.LBE600:
 1844              	.LBE597:
 1845              	.LBE596:
 1846              	.LBE595:
  20:Sequencer.cpp ****     }
 1847              		.loc 1 20 9 is_stmt 1 view .LVU471
  19:Sequencer.cpp ****         init_sequences();
 1848              		.loc 1 19 91 is_stmt 0 view .LVU472
 1849 000c 80ED010A 		vstr.32	s0, [r0, #4]
 1850              	.LBB606:
 1851              	.LBB605:
 1852              	.LBB604:
 1853              	.LBB603:
 1854              	.LBB602:
  98:c:\program files\daisytoolchain\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 1855              		.loc 2 98 47 view .LVU473
 1856 0010 C0E90633 		strd	r3, r3, [r0, #24]
 1857              	.LBE602:
 1858              	.LBE603:
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 140


 1859              	.LBE604:
 1860              	.LBE605:
 1861              	.LBE606:
  19:Sequencer.cpp ****         init_sequences();
 1862              		.loc 1 19 91 view .LVU474
 1863 0014 4FF4D243 		mov	r3, #26880
 1864 0018 C0E90312 		strd	r1, r2, [r0, #12]
 1865 001c 0380     		strh	r3, [r0]	@ movhi
  20:Sequencer.cpp ****     }
 1866              		.loc 1 20 23 view .LVU475
 1867 001e FFF7FEFF 		bl	_ZN9Sequencer14init_sequencesEv
 1868              	.LVL100:
  20:Sequencer.cpp ****     }
 1869              		.loc 1 20 23 view .LVU476
 1870              	.LBE608:
  21:Sequencer.cpp **** 
 1871              		.loc 1 21 5 view .LVU477
 1872 0022 2046     		mov	r0, r4
 1873 0024 10BD     		pop	{r4, pc}
  21:Sequencer.cpp **** 
 1874              		.loc 1 21 5 view .LVU478
 1875              		.cfi_endproc
 1876              	.LFE4303:
 1878              		.global	_ZN9SequencerC1EfR9DrumSynthR10ChordSynth
 1879              		.thumb_set _ZN9SequencerC1EfR9DrumSynthR10ChordSynth,_ZN9SequencerC2EfR9DrumSynthR10ChordSynth
 1880 0026 00BF     		.section	.rodata
 1881              		.align	2
 1882              		.set	.LANCHOR0,. + 0
 1883              	.LC0:
 1884 0000 01       		.byte	1
 1885 0001 00       		.byte	0
 1886 0002 00       		.byte	0
 1887 0003 00       		.byte	0
 1888 0004 01       		.byte	1
 1889 0005 00       		.byte	0
 1890 0006 00       		.byte	0
 1891 0007 00       		.byte	0
 1892 0008 01       		.byte	1
 1893 0009 00       		.byte	0
 1894 000a 00       		.byte	0
 1895 000b 00       		.byte	0
 1896 000c 01       		.byte	1
 1897 000d 00       		.byte	0
 1898 000e 00       		.byte	0
 1899 000f 00       		.byte	0
 1900              	.LC1:
 1901 0010 01       		.byte	1
 1902 0011 00       		.byte	0
 1903 0012 01       		.byte	1
 1904 0013 00       		.byte	0
 1905 0014 01       		.byte	1
 1906 0015 00       		.byte	0
 1907 0016 01       		.byte	1
 1908 0017 00       		.byte	0
 1909 0018 01       		.byte	1
 1910 0019 00       		.byte	0
 1911 001a 01       		.byte	1
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 141


 1912 001b 00       		.byte	0
 1913 001c 01       		.byte	1
 1914 001d 00       		.byte	0
 1915 001e 01       		.byte	1
 1916 001f 00       		.byte	0
 1917              	.LC2:
 1918 0020 00       		.byte	0
 1919 0021 00       		.byte	0
 1920 0022 00       		.byte	0
 1921 0023 00       		.byte	0
 1922 0024 01       		.byte	1
 1923 0025 00       		.byte	0
 1924 0026 01       		.byte	1
 1925 0027 00       		.byte	0
 1926 0028 00       		.byte	0
 1927 0029 00       		.byte	0
 1928 002a 00       		.byte	0
 1929 002b 00       		.byte	0
 1930 002c 01       		.byte	1
 1931 002d 01       		.byte	1
 1932 002e 00       		.byte	0
 1933 002f 00       		.byte	0
 1934              	.LC3:
 1935 0030 01       		.byte	1
 1936 0031 00       		.byte	0
 1937 0032 00       		.byte	0
 1938 0033 00       		.byte	0
 1939 0034 01       		.byte	1
 1940 0035 00       		.byte	0
 1941 0036 00       		.byte	0
 1942 0037 00       		.byte	0
 1943 0038 01       		.byte	1
 1944 0039 01       		.byte	1
 1945 003a 00       		.byte	0
 1946 003b 00       		.byte	0
 1947 003c 01       		.byte	1
 1948 003d 00       		.byte	0
 1949 003e 00       		.byte	0
 1950 003f 00       		.byte	0
 1951              	.LC4:
 1952 0040 00       		.byte	0
 1953 0041 00       		.byte	0
 1954 0042 00       		.byte	0
 1955 0043 01       		.byte	1
 1956 0044 00       		.byte	0
 1957 0045 00       		.byte	0
 1958 0046 01       		.byte	1
 1959 0047 00       		.byte	0
 1960 0048 00       		.byte	0
 1961 0049 00       		.byte	0
 1962 004a 00       		.byte	0
 1963 004b 01       		.byte	1
 1964 004c 00       		.byte	0
 1965 004d 00       		.byte	0
 1966 004e 01       		.byte	1
 1967 004f 00       		.byte	0
 1968              	.LC5:
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 142


 1969 0050 01       		.byte	1
 1970 0051 00       		.byte	0
 1971 0052 01       		.byte	1
 1972 0053 00       		.byte	0
 1973 0054 01       		.byte	1
 1974 0055 00       		.byte	0
 1975 0056 01       		.byte	1
 1976 0057 00       		.byte	0
 1977 0058 01       		.byte	1
 1978 0059 01       		.byte	1
 1979 005a 01       		.byte	1
 1980 005b 00       		.byte	0
 1981 005c 01       		.byte	1
 1982 005d 00       		.byte	0
 1983 005e 01       		.byte	1
 1984 005f 00       		.byte	0
 1985              	.LC6:
 1986 0060 00       		.byte	0
 1987 0061 00       		.byte	0
 1988 0062 00       		.byte	0
 1989 0063 01       		.byte	1
 1990 0064 00       		.byte	0
 1991 0065 00       		.byte	0
 1992 0066 01       		.byte	1
 1993 0067 01       		.byte	1
 1994 0068 00       		.byte	0
 1995 0069 00       		.byte	0
 1996 006a 00       		.byte	0
 1997 006b 01       		.byte	1
 1998 006c 00       		.byte	0
 1999 006d 00       		.byte	0
 2000 006e 01       		.byte	1
 2001 006f 01       		.byte	1
 2002              	.LC7:
 2003 0070 01       		.byte	1
 2004 0071 01       		.byte	1
 2005 0072 01       		.byte	1
 2006 0073 01       		.byte	1
 2007 0074 01       		.byte	1
 2008 0075 01       		.byte	1
 2009 0076 01       		.byte	1
 2010 0077 01       		.byte	1
 2011 0078 01       		.byte	1
 2012 0079 01       		.byte	1
 2013 007a 01       		.byte	1
 2014 007b 01       		.byte	1
 2015 007c 01       		.byte	1
 2016 007d 01       		.byte	1
 2017 007e 01       		.byte	1
 2018 007f 01       		.byte	1
 2019              	.LC8:
 2020 0080 00       		.byte	0
 2021 0081 00       		.byte	0
 2022 0082 01       		.byte	1
 2023 0083 00       		.byte	0
 2024 0084 01       		.byte	1
 2025 0085 00       		.byte	0
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 143


 2026 0086 00       		.byte	0
 2027 0087 00       		.byte	0
 2028 0088 01       		.byte	1
 2029 0089 00       		.byte	0
 2030 008a 00       		.byte	0
 2031 008b 01       		.byte	1
 2032 008c 00       		.byte	0
 2033 008d 00       		.byte	0
 2034 008e 01       		.byte	1
 2035 008f 00       		.byte	0
 2036              	.LC9:
 2037 0090 01       		.byte	1
 2038 0091 00       		.byte	0
 2039 0092 00       		.byte	0
 2040 0093 00       		.byte	0
 2041 0094 01       		.byte	1
 2042 0095 00       		.byte	0
 2043 0096 00       		.byte	0
 2044 0097 00       		.byte	0
 2045 0098 01       		.byte	1
 2046 0099 00       		.byte	0
 2047 009a 00       		.byte	0
 2048 009b 00       		.byte	0
 2049 009c 01       		.byte	1
 2050 009d 00       		.byte	0
 2051 009e 01       		.byte	1
 2052 009f 00       		.byte	0
 2053              		.text
 2054              	.Letext0:
 2055              		.file 12 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 2056              		.file 13 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 2057              		.file 14 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\stdint.h"
 2058              		.file 15 "c:\\program files\\daisytoolchain\\lib\\gcc\\arm-none-eabi\\10.2.1\\include\\stddef.h"
 2059              		.file 16 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\basic_stri
 2060              		.file 17 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\cmath"
 2061              		.file 18 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\std_abs.h"
 2062              		.file 19 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\cstdint"
 2063              		.file 20 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\type_traits"
 2064              		.file 21 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\arm-none-eabi\\t
 2065              		.file 22 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\stl_pair.h
 2066              		.file 23 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\debug\\debug.h"
 2067              		.file 24 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\exception_
 2068              		.file 25 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\cstdlib"
 2069              		.file 26 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\cwchar"
 2070              		.file 27 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\char_trait
 2071              		.file 28 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\clocale"
 2072              		.file 29 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\cstdio"
 2073              		.file 30 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\initializer_list
 2074              		.file 31 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\stringfwd.
 2075              		.file 32 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\charconv.h
 2076              		.file 33 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\algorithmf
 2077              		.file 34 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\cstring"
 2078              		.file 35 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\uses_alloc
 2079              		.file 36 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\tuple"
 2080              		.file 37 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\stl_iterat
 2081              		.file 38 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\move.h"
 2082              		.file 39 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\stl_algoba
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 144


 2083              		.file 40 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\predefined
 2084              		.file 41 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\ext\\alloc_trait
 2085              		.file 42 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\sys\\_types.h"
 2086              		.file 43 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\sys\\reent.h"
 2087              		.file 44 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\sys\\lock.h"
 2088              		.file 45 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\math.h"
 2089              		.file 46 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\stdlib.h"
 2090              		.file 47 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\math.h"
 2091              		.file 48 "../../DaisySP//Source/Control/adenv.h"
 2092              		.file 49 "../../DaisySP//Source/Utility/dsp.h"
 2093              		.file 50 "../../DaisySP//Source/Synthesis/oscillator.h"
 2094              		.file 51 "../../DaisySP//Source/Filters/svf.h"
 2095              		.file 52 "c:\\program files\\daisytoolchain\\lib\\gcc\\arm-none-eabi\\10.2.1\\include\\stdarg.h"
 2096              		.file 53 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\wchar.h"
 2097              		.file 54 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\locale.h"
 2098              		.file 55 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\stdio.h"
 2099              		.file 56 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\stdlib.h"
 2100              		.file 57 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\string.h"
 2101              		.file 58 "DrumSynth.h"
 2102              		.file 59 "InstrumentState.h"
 2103              		.file 60 "Sequencer.h"
 2104              		.file 61 "utils.h"
 2105              		.file 62 "c:\\program files\\daisytoolchain\\arm-none-eabi\\include\\c++\\10.2.1\\bits\\functexcep
 2106              		.file 63 "<built-in>"
ARM GAS  C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s 			page 145


DEFINED SYMBOLS
                            *ABS*:00000000 Sequencer.cpp
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:17     .text._ZN9Sequencer4tickEv:00000000 $t
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:26     .text._ZN9Sequencer4tickEv:00000000 _ZN9Sequencer4tickEv
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:310    .text._ZN9Sequencer4tickEv:000000c4 $d
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:317    .text._ZN9Sequencer14scroll_patternEb:00000000 $t
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:325    .text._ZN9Sequencer14scroll_patternEb:00000000 _ZN9Sequencer14scroll_patternEb
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:449    .text._ZN9Sequencer14scroll_patternEb:00000054 $d
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:454    .rodata._ZNSt6vectorIN9Sequencer8SequenceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_.str1.4:00000000 $d
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:458    .text._ZNSt6vectorIN9Sequencer8SequenceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_:00000000 $t
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:466    .text._ZNSt6vectorIN9Sequencer8SequenceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_:00000000 _ZNSt6vectorIN9Sequencer8SequenceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:936    .text._ZNSt6vectorIN9Sequencer8SequenceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_:000000fc $d
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:947    .text._ZN9Sequencer14init_sequencesEv:00000000 $t
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:955    .text._ZN9Sequencer14init_sequencesEv:00000000 _ZN9Sequencer14init_sequencesEv
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:1628   .text._ZN9Sequencer14init_sequencesEv:00000364 $d
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:1653   .text._ZN9Sequencer14init_sequencesEv:0000038c $t
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:1781   .text._ZN9SequencerC2EfR9DrumSynthR10ChordSynth:00000000 $t
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:1789   .text._ZN9SequencerC2EfR9DrumSynthR10ChordSynth:00000000 _ZN9SequencerC2EfR9DrumSynthR10ChordSynth
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:1789   .text._ZN9SequencerC2EfR9DrumSynthR10ChordSynth:00000000 _ZN9SequencerC1EfR9DrumSynthR10ChordSynth
C:\Users\theja\AppData\Local\Temp\ccV0pz5d.s:1881   .rodata:00000000 $d

UNDEFINED SYMBOLS
memcpy
_ZN10ChordSynth13set_bass_noteEh
_ZN9DrumSynth11trigger_hatEv
_ZN9DrumSynth13trigger_snareEv
_ZN9DrumSynth12trigger_kickEv
_ZdlPvj
_Znwj
_ZSt20__throw_length_errorPKc
